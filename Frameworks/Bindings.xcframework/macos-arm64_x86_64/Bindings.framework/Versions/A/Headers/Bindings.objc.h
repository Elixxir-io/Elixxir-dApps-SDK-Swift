// Objective-C API for talking to gitlab.com/elixxir/client/v4/bindings Go package.
//   gobind -lang=objc gitlab.com/elixxir/client/v4/bindings
//
// File is generated by gobind. Do not edit.

#ifndef __Bindings_H__
#define __Bindings_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"


@class BindingsAuthenticatedConnection;
@class BindingsBackup;
@class BindingsBackupReport;
@class BindingsChannelDbCipher;
@class BindingsChannelGeneration;
@class BindingsChannelInfo;
@class BindingsChannelSendReport;
@class BindingsChannelsManager;
@class BindingsCmix;
@class BindingsConnection;
@class BindingsDummyTraffic;
@class BindingsE2ESendReport;
@class BindingsE2e;
@class BindingsEventReport;
@class BindingsFilePartTracker;
@class BindingsFileSend;
@class BindingsFileTransfer;
@class BindingsGroup;
@class BindingsGroupChat;
@class BindingsGroupChatMessage;
@class BindingsGroupReport;
@class BindingsGroupSendReport;
@class BindingsIsReadyInfo;
@class BindingsMessage;
@class BindingsNodeRegistrationReport;
@class BindingsNotificationReport;
@class BindingsProgress;
@class BindingsReceivedChannelMessageReport;
@class BindingsReceivedFile;
@class BindingsReceptionIdentity;
@class BindingsRestlikeMessage;
@class BindingsRoundsList;
@class BindingsShareURL;
@class BindingsSingleUseCallbackReport;
@class BindingsSingleUseResponseReport;
@class BindingsSingleUseSendReport;
@class BindingsUserDiscovery;
@protocol BindingsAuthCallbacks;
@class BindingsAuthCallbacks;
@protocol BindingsChannelMessageReceptionCallback;
@class BindingsChannelMessageReceptionCallback;
@protocol BindingsClientError;
@class BindingsClientError;
@protocol BindingsEventModel;
@class BindingsEventModel;
@protocol BindingsEventModelBuilder;
@class BindingsEventModelBuilder;
@protocol BindingsFileTransferReceiveProgressCallback;
@class BindingsFileTransferReceiveProgressCallback;
@protocol BindingsFileTransferSentProgressCallback;
@class BindingsFileTransferSentProgressCallback;
@protocol BindingsGroupChatProcessor;
@class BindingsGroupChatProcessor;
@protocol BindingsGroupRequest;
@class BindingsGroupRequest;
@protocol BindingsListener;
@class BindingsListener;
@protocol BindingsLogWriter;
@class BindingsLogWriter;
@protocol BindingsMessageDeliveryCallback;
@class BindingsMessageDeliveryCallback;
@protocol BindingsNetworkHealthCallback;
@class BindingsNetworkHealthCallback;
@protocol BindingsProcessor;
@class BindingsProcessor;
@protocol BindingsReceiveFileCallback;
@class BindingsReceiveFileCallback;
@protocol BindingsReporterFunc;
@class BindingsReporterFunc;
@protocol BindingsRestlikeCallback;
@class BindingsRestlikeCallback;
@protocol BindingsSingleUseCallback;
@class BindingsSingleUseCallback;
@protocol BindingsSingleUseResponse;
@class BindingsSingleUseResponse;
@protocol BindingsStopper;
@class BindingsStopper;
@protocol BindingsTrackServicesCallback;
@class BindingsTrackServicesCallback;
@protocol BindingsUdLookupCallback;
@class BindingsUdLookupCallback;
@protocol BindingsUdMultiLookupCallback;
@class BindingsUdMultiLookupCallback;
@protocol BindingsUdNetworkStatus;
@class BindingsUdNetworkStatus;
@protocol BindingsUdSearchCallback;
@class BindingsUdSearchCallback;
@protocol BindingsUpdateBackupFunc;
@class BindingsUpdateBackupFunc;

@protocol BindingsAuthCallbacks <NSObject>
- (void)confirm:(NSData* _Nullable)contact receptionId:(NSData* _Nullable)receptionId ephemeralId:(int64_t)ephemeralId roundId:(int64_t)roundId;
- (void)request:(NSData* _Nullable)contact receptionId:(NSData* _Nullable)receptionId ephemeralId:(int64_t)ephemeralId roundId:(int64_t)roundId;
- (void)reset:(NSData* _Nullable)contact receptionId:(NSData* _Nullable)receptionId ephemeralId:(int64_t)ephemeralId roundId:(int64_t)roundId;
@end

@protocol BindingsChannelMessageReceptionCallback <NSObject>
- (long)callback:(NSData* _Nullable)receivedChannelMessageReport err:(NSError* _Nullable)err;
@end

@protocol BindingsClientError <NSObject>
- (void)report:(NSString* _Nullable)source message:(NSString* _Nullable)message trace:(NSString* _Nullable)trace;
@end

@protocol BindingsEventModel <NSObject>
/**
 * JoinChannel is called whenever a channel is joined locally.

Parameters:
 - channel - Returns the pretty print representation of a channel.
 */
- (void)joinChannel:(NSString* _Nullable)channel;
/**
 * LeaveChannel is called whenever a channel is left locally.

Parameters:
 - ChannelId - The marshalled channel [id.ID].
 */
- (void)leaveChannel:(NSData* _Nullable)channelID;
/**
 * ReceiveMessage is called whenever a message is received on a given
channel. It may be called multiple times on the same message. It is
incumbent on the user of the API to filter such called by message ID.

Parameters:
 - channelID - The marshalled channel [id.ID].
 - messageID - The bytes of the [channel.MessageID] of the received
   message.
 - nickname - The nickname of the sender of the message.
 - text - The content of the message.
 - timestamp - Time the message was received; represented as nanoseconds
   since unix epoch.
 - pubKey - The sender's Ed25519 public key.
 - codeset - The codeset version.
 - lease - The number of nanoseconds that the message is valid for.
 - roundId - The ID of the round that the message was received on.
 - mType - the type of the message, always 1 for this call
 - status - the [channels.SentStatus] of the message.

Statuses will be enumerated as such:
 Sent      =  0
 Delivered =  1
 Failed    =  2

Returns a non-negative unique UUID for the message that it can be
referenced by later with [EventModel.UpdateSentStatus].
 */
- (int64_t)receiveMessage:(NSData* _Nullable)channelID messageID:(NSData* _Nullable)messageID nickname:(NSString* _Nullable)nickname text:(NSString* _Nullable)text pubKey:(NSData* _Nullable)pubKey codeset:(long)codeset timestamp:(int64_t)timestamp lease:(int64_t)lease roundId:(int64_t)roundId mType:(int64_t)mType status:(int64_t)status;
/**
 * ReceiveReaction is called whenever a reaction to a message is received
on a given channel. It may be called multiple times on the same reaction.
It is incumbent on the user of the API to filter such called by message
ID.

Messages may arrive our of order, so a reply in theory can arrive before
the initial message. As a result, it may be important to buffer
reactions.

Parameters:
 - channelID - The marshalled channel [id.ID].
 - messageID - The bytes of the [channel.MessageID] of the received
   message.
 - reactionTo - The [channel.MessageID] for the message that received a
   reply.
 - nickname - The nickname of the sender of the message.
 - reaction - The contents of the reaction message.
 - pubKey - The sender's Ed25519 public key.
 - codeset - The codeset version.
 - timestamp - Time the message was received; represented as nanoseconds
   since unix epoch.
 - lease - The number of nanoseconds that the message is valid for.
 - roundId - The ID of the round that the message was received on.
 - mType - the type of the message, always 1 for this call
 - status - the [channels.SentStatus] of the message.

Statuses will be enumerated as such:
 Sent      =  0
 Delivered =  1
 Failed    =  2

Returns a non-negative unique uuid for the message by which it can be
referenced later with UpdateSentStatus
 */
- (int64_t)receiveReaction:(NSData* _Nullable)channelID messageID:(NSData* _Nullable)messageID reactionTo:(NSData* _Nullable)reactionTo nickname:(NSString* _Nullable)nickname reaction:(NSString* _Nullable)reaction pubKey:(NSData* _Nullable)pubKey codeset:(long)codeset timestamp:(int64_t)timestamp lease:(int64_t)lease roundId:(int64_t)roundId mType:(int64_t)mType status:(int64_t)status;
/**
 * ReceiveReply is called whenever a message is received that is a reply on
a given channel. It may be called multiple times on the same message. It
is incumbent on the user of the API to filter such called by message ID.

Messages may arrive our of order, so a reply in theory can arrive before
the initial message. As a result, it may be important to buffer replies.

Parameters:
 - channelID - The marshalled channel [id.ID].
 - messageID - The bytes of the [channel.MessageID] of the received
   message.
 - reactionTo - The [channel.MessageID] for the message that received a
   reply.
 - nickname - The nickname of the sender of the message.
 - text - The content of the message.
 - pubKey - The sender's Ed25519 public key.
 - codeset - The codeset version.
 - timestamp - Time the message was received; represented as nanoseconds
   since unix epoch.
 - lease - The number of nanoseconds that the message is valid for.
 - roundId - The ID of the round that the message was received on.
 - mType - the type of the message, always 1 for this call
 - status - the [channels.SentStatus] of the message.

Statuses will be enumerated as such:
 Sent      =  0
 Delivered =  1
 Failed    =  2

Returns a non-negative unique UUID for the message that it can be
referenced by later with [EventModel.UpdateSentStatus].
 */
- (int64_t)receiveReply:(NSData* _Nullable)channelID messageID:(NSData* _Nullable)messageID reactionTo:(NSData* _Nullable)reactionTo nickname:(NSString* _Nullable)nickname text:(NSString* _Nullable)text pubKey:(NSData* _Nullable)pubKey codeset:(long)codeset timestamp:(int64_t)timestamp lease:(int64_t)lease roundId:(int64_t)roundId mType:(int64_t)mType status:(int64_t)status;
/**
 * UpdateSentStatus is called whenever the sent status of a message has
changed.

Parameters:
 - messageID - The bytes of the [channel.MessageID] of the received
   message.
 - status - the [channels.SentStatus] of the message.

Statuses will be enumerated as such:
 Sent      =  0
 Delivered =  1
 Failed    =  2
 */
- (void)updateSentStatus:(int64_t)uuid messageID:(NSData* _Nullable)messageID timestamp:(int64_t)timestamp roundID:(int64_t)roundID status:(int64_t)status;
@end

@protocol BindingsEventModelBuilder <NSObject>
- (id<BindingsEventModel> _Nullable)build:(NSString* _Nullable)path;
@end

@protocol BindingsFileTransferReceiveProgressCallback <NSObject>
/**
 * Callback is called when a file part is received or an error occurs. Once
a transfer completes, the file can be received using
[FileTransfer.Receive].

Parameters:
 - payload - JSON of [Progress], which describes the progress of the
   current transfer.
 - t - file part tracker that allows the lookup of the status of
   individual file parts.
 - err - Fatal errors during receiving. If an error is returned, the
   transfer has failed and will not resume.
 */
- (void)callback:(NSData* _Nullable)payload t:(BindingsFilePartTracker* _Nullable)t err:(NSError* _Nullable)err;
@end

@protocol BindingsFileTransferSentProgressCallback <NSObject>
/**
 * Callback is called when a file part is sent or an error occurs. Once a
transfer completes, it should be closed using [FileTransfer.CloseSend].

Parameters:
 - payload - JSON of [Progress], which describes the progress of the
   current transfer.
 - t - file part tracker that allows the lookup of the status of
   individual file parts.
 - err - Fatal errors during sending. If an error is returned, the
   transfer has failed and will not resume. It must be cleared using
   [FileTransfer.CloseSend].
 */
- (void)callback:(NSData* _Nullable)payload t:(BindingsFilePartTracker* _Nullable)t err:(NSError* _Nullable)err;
@end

@protocol BindingsGroupChatProcessor <NSObject>
- (void)process:(NSData* _Nullable)decryptedMessage msg:(NSData* _Nullable)msg receptionId:(NSData* _Nullable)receptionId ephemeralId:(int64_t)ephemeralId roundId:(int64_t)roundId roundUrl:(NSString* _Nullable)roundUrl err:(NSError* _Nullable)err;
- (NSString* _Nonnull)string;
@end

@protocol BindingsGroupRequest <NSObject>
- (void)callback:(BindingsGroup* _Nullable)g;
@end

@protocol BindingsListener <NSObject>
/**
 * Hear is called to receive a message in the UI.

Parameters:
 - item - JSON marshalled Message object
 */
- (void)hear:(NSData* _Nullable)item;
/**
 * Name returns a name; used for debugging.
 */
- (NSString* _Nonnull)name;
@end

@protocol BindingsLogWriter <NSObject>
- (void)log:(NSString* _Nullable)p0;
@end

@protocol BindingsMessageDeliveryCallback <NSObject>
- (void)eventCallback:(BOOL)delivered timedOut:(BOOL)timedOut roundResults:(NSData* _Nullable)roundResults;
@end

@protocol BindingsNetworkHealthCallback <NSObject>
- (void)callback:(BOOL)p0;
@end

@protocol BindingsProcessor <NSObject>
- (void)process:(NSData* _Nullable)message receptionId:(NSData* _Nullable)receptionId ephemeralId:(int64_t)ephemeralId roundId:(int64_t)roundId;
- (NSString* _Nonnull)string;
@end

@protocol BindingsReceiveFileCallback <NSObject>
/**
 * Callback is called when a new file transfer is received.

Parameters:
 - payload - JSON of [ReceivedFile], which contains information about the
   incoming file transfer.
 */
- (void)callback:(NSData* _Nullable)payload;
@end

@protocol BindingsReporterFunc <NSObject>
- (void)report:(NSData* _Nullable)payload err:(NSError* _Nullable)err;
@end

@protocol BindingsRestlikeCallback <NSObject>
- (void)callback:(NSData* _Nullable)p0 p1:(NSError* _Nullable)p1;
@end

@protocol BindingsSingleUseCallback <NSObject>
- (void)callback:(NSData* _Nullable)callbackReport err:(NSError* _Nullable)err;
@end

@protocol BindingsSingleUseResponse <NSObject>
- (void)callback:(NSData* _Nullable)responseReport err:(NSError* _Nullable)err;
@end

@protocol BindingsStopper <NSObject>
- (void)stop;
@end

@protocol BindingsTrackServicesCallback <NSObject>
- (void)callback:(NSData* _Nullable)marshalData err:(NSError* _Nullable)err;
@end

@protocol BindingsUdLookupCallback <NSObject>
- (void)callback:(NSData* _Nullable)contactBytes err:(NSError* _Nullable)err;
@end

@protocol BindingsUdMultiLookupCallback <NSObject>
- (void)callback:(NSData* _Nullable)contactListJSON failedIDs:(NSData* _Nullable)failedIDs err:(NSError* _Nullable)err;
@end

@protocol BindingsUdNetworkStatus <NSObject>
/**
 * UdNetworkStatus returns:
- int - a xxdk.Status int
 */
- (long)udNetworkStatus;
@end

@protocol BindingsUdSearchCallback <NSObject>
- (void)callback:(NSData* _Nullable)contactListJSON err:(NSError* _Nullable)err;
@end

@protocol BindingsUpdateBackupFunc <NSObject>
- (void)updateBackup:(NSData* _Nullable)encryptedBackup;
@end

@interface BindingsAuthenticatedConnection : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped field AuthenticatedConnection.Connection with unsupported type: gitlab.com/elixxir/client/v4/bindings.Connection

- (BOOL)close:(NSError* _Nullable* _Nullable)error;
- (long)getId;
- (NSData* _Nullable)getPartner;
- (BOOL)isAuthenticated;
- (BOOL)registerListener:(long)messageType newListener:(id<BindingsListener> _Nullable)newListener error:(NSError* _Nullable* _Nullable)error;
- (NSData* _Nullable)sendE2E:(long)mt payload:(NSData* _Nullable)payload error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * Backup is a bindings-level struct encapsulating the backup.Backup
client object.
 */
@interface BindingsBackup : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * AddJson stores the argument within the Backup structure.

Params
 - json - JSON string
 */
- (void)addJson:(NSString* _Nullable)json;
/**
 * IsBackupRunning returns true if the backup has been initialized and is
running. Returns false if it has been stopped.
 */
- (BOOL)isBackupRunning;
/**
 * StopBackup stops the backup processes and deletes the user's password from
storage. To enable backups again, call InitializeBackup.
 */
- (BOOL)stopBackup:(NSError* _Nullable* _Nullable)error;
@end

/**
 * BackupReport is the bindings' representation of the return values of
NewCmixFromBackup.

Example BackupReport:
 {
   "RestoredContacts": [
     "U4x/lrFkvxuXu59LtHLon1sUhPJSCcnZND6SugndnVID",
     "15tNdkKbYXoMn58NO6VbDMDWFEyIhTWEGsvgcJsHWAgD"
   ],
   "Params": ""
 }
 */
@interface BindingsBackupReport : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped field BackupReport.RestoredContacts with unsupported type: []*gitlab.com/xx_network/primitives/id.ID

/**
 * The backup parameters found within the backup file
 */
@property (nonatomic) NSString* _Nonnull params;
@end

/**
 * ChannelDbCipher is the bindings layer representation of the [channel.Cipher].
 */
@interface BindingsChannelDbCipher : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Decrypt will decrypt the passed in encrypted value. The plaintext will
be returned by this function. Any padding will be discarded within
this function.

Parameters:
 - ciphertext - the encrypted data returned by [ChannelDbCipher.Encrypt].
 */
- (NSData* _Nullable)decrypt:(NSData* _Nullable)ciphertext error:(NSError* _Nullable* _Nullable)error;
/**
 * Encrypt will encrypt the raw data. It will return a ciphertext. Padding is
done on the plaintext so all encrypted data looks uniform at rest.

Parameters:
 - plaintext - The data to be encrypted. This must be smaller than the block
   size passed into [NewChannelsDatabaseCipher]. If it is larger, this will
   return an error.
 */
- (NSData* _Nullable)encrypt:(NSData* _Nullable)plaintext error:(NSError* _Nullable* _Nullable)error;
/**
 * GetID returns the ID for this ChannelDbCipher in the channelDbCipherTracker.
 */
- (long)getID;
@end

/**
 * ChannelGeneration contains information about a newly generated channel. It
contains the public channel info formatted in pretty print and the private
key for the channel in PEM format.

Example JSON:
 {
   "Channel": "\u003cSpeakeasy-v3:name|description:desc|level:Public|created:1665489600000000000|secrets:zjHmrPPMDQ0tNSANjAmQfKhRpJIdJMU+Hz5hsZ+fVpk=|qozRNkADprqb38lsnU7WxCtGCq9OChlySCEgl4NHjI4=|2|328|7aZQAtuVjE84q4Z09iGytTSXfZj9NyTa6qBp0ueKjCI=\u003e",
	  "PrivateKey": "-----BEGIN RSA PRIVATE KEY-----\nMCYCAQACAwDVywIDAQABAgMAlVECAgDvAgIA5QICAJECAgCVAgIA1w==\n-----END RSA PRIVATE KEY-----"
 }
 */
@interface BindingsChannelGeneration : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull channel;
@property (nonatomic) NSString* _Nonnull privateKey;
@end

/**
 * ChannelInfo contains information about a channel.

Example of ChannelInfo JSON:
 {
   "Name": "Test Channel",
   "Description": "This is a test channel",
   "ChannelID": "RRnpRhmvXtW9ugS1nILJ3WfttdctDvC2jeuH43E0g/0D",
 }
 */
@interface BindingsChannelInfo : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull name;
@property (nonatomic) NSString* _Nonnull description;
@property (nonatomic) NSString* _Nonnull channelID;
@end

/**
 * ChannelSendReport is the bindings' representation of the return values of
ChannelsManager's Send operations.

JSON Example:
 {
   "MessageId": "0kitNxoFdsF4q1VMSI/xPzfCnGB2l+ln2+7CTHjHbJw=",
   "Rounds":[1,5,9],
   "EphId": 0
 }
 */
@interface BindingsChannelSendReport : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSData* _Nullable messageId;
// skipped field ChannelSendReport.RoundsList with unsupported type: gitlab.com/elixxir/client/v4/bindings.RoundsList

@property (nonatomic) int64_t ephId;
- (NSData* _Nullable)marshal:(NSError* _Nullable* _Nullable)error;
@end

/**
 * ChannelsManager is a bindings-layer struct that wraps a [channels.Manager]
interface.
 */
@interface BindingsChannelsManager : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewChannelsManager creates a new [ChannelsManager] from a new private
identity ([channel.PrivateIdentity]).

This is for creating a manager for an identity for the first time. For
generating a new one channel identity, use [GenerateChannelIdentity]. To
reload this channel manager, use [LoadChannelsManager], passing in the
storage tag retrieved by [ChannelsManager.GetStorageTag].

Parameters:
 - cmixID - The tracked Cmix object ID. This can be retrieved using
   [Cmix.GetID].
 - privateIdentity - Bytes of a private identity ([channel.PrivateIdentity])
   that is generated by [GenerateChannelIdentity].
 - event -  An interface that contains a function that initialises and returns
   the event model that is bindings-compatible.
 */
- (nullable instancetype)init:(long)cmixID privateIdentity:(NSData* _Nullable)privateIdentity eventBuilder:(id<BindingsEventModelBuilder> _Nullable)eventBuilder;
// skipped constructor ChannelsManager.NewChannelsManagerGoEventModel with unsupported parameter or return types

/**
 * DeleteNickname deletes the nickname for a given channel.
 */
- (BOOL)deleteNickname:(NSData* _Nullable)ch error:(NSError* _Nullable* _Nullable)error;
/**
 * ExportPrivateIdentity encrypts and exports the private identity to a portable
string.
 */
- (NSData* _Nullable)exportPrivateIdentity:(NSString* _Nullable)password error:(NSError* _Nullable* _Nullable)error;
/**
 * GetChannels returns the IDs of all channels that have been joined.

Returns:
 - []byte - A JSON marshalled list of IDs.

JSON Example:
 {
   "U4x/lrFkvxuXu59LtHLon1sUhPJSCcnZND6SugndnVID",
   "15tNdkKbYXoMn58NO6VbDMDWFEyIhTWEGsvgcJsHWAgD"
 }
 */
- (NSData* _Nullable)getChannels:(NSError* _Nullable* _Nullable)error;
/**
 * GetID returns the channelManagerTracker ID for the ChannelsManager object.
 */
- (long)getID;
/**
 * GetIdentity returns the marshaled public identity ([channel.Identity]) that
the channel is using.
 */
- (NSData* _Nullable)getIdentity:(NSError* _Nullable* _Nullable)error;
/**
 * GetNickname returns the nickname set for a given channel. Returns an error if
there is no nickname set.
 */
- (NSString* _Nonnull)getNickname:(NSData* _Nullable)ch error:(NSError* _Nullable* _Nullable)error;
/**
 * GetShareURL generates a URL that can be used to share this channel with
others on the given host.

A URL comes in one of three forms based on the privacy level set when
generating the channel. Each privacy level hides more information than the
last with the lowest level revealing everything and the highest level
revealing nothing. For any level above the lowest, a password is returned,
which will be required when decoding the URL.

The maxUses is the maximum number of times this URL can be used to join a
channel. If it is set to 0, then it can be shared unlimited times. The max
uses is set as a URL parameter using the key [broadcast.MaxUsesKey]. Note
that this number is also encoded in the secret data for private and secret
URLs, so if the number is changed in the URL, is will be verified when
calling [ChannelsManager.JoinChannelFromURL]. There is no enforcement for
public URLs.

Parameters:
 - cmixID - The tracked Cmix object ID.
 - host - The URL to append the channel info to.
 - maxUses - The maximum number of uses the link can be used (0 for
   unlimited).
 - marshalledChanId - A marshalled channel ID ([id.ID]).

Returns:
 - JSON of ShareURL.
 */
- (NSData* _Nullable)getShareURL:(long)cmixID host:(NSString* _Nullable)host maxUses:(long)maxUses marshalledChanId:(NSData* _Nullable)marshalledChanId error:(NSError* _Nullable* _Nullable)error;
/**
 * GetStorageTag returns the storage tag needed to reload the manager.
 */
- (NSString* _Nonnull)getStorageTag;
/**
 * JoinChannel joins the given channel. It will fail if the channel has already
been joined.

Parameters:
 - channelPretty - A portable channel string. Should be received from
   another user or generated via GenerateChannel.

The pretty print will be of the format:
 <Speakeasy-v3:Test_Channel|description:Channel description.|level:Public|created:1666718081766741100|secrets:+oHcqDbJPZaT3xD5NcdLY8OjOMtSQNKdKgLPmr7ugdU=|rCI0wr01dHFStjSFMvsBzFZClvDIrHLL5xbCOPaUOJ0=|493|1|7cBhJxVfQxWo+DypOISRpeWdQBhuQpAZtUbQHjBm8NQ=>

Returns:
 - []byte - JSON of [ChannelInfo], which describes all relevant channel info.
 */
- (NSData* _Nullable)joinChannel:(NSString* _Nullable)channelPretty error:(NSError* _Nullable* _Nullable)error;
/**
 * LeaveChannel leaves the given channel. It will return an error if the
channel was not previously joined.

Parameters:
 - marshalledChanId - A JSON marshalled channel ID ([id.ID]).
 */
- (BOOL)leaveChannel:(NSData* _Nullable)marshalledChanId error:(NSError* _Nullable* _Nullable)error;
/**
 * RegisterReceiveHandler is used to register handlers for non-default message
types. They can be processed by modules. It is important that such modules
sync up with the event model implementation.

There can only be one handler per [channels.MessageType], and this will
return an error on any re-registration.

Parameters:
 - messageType - represents the [channels.MessageType] which will have a
   registered listener.
 - listenerCb - the callback which will be executed when a channel message
   of messageType is received.
 */
- (BOOL)registerReceiveHandler:(long)messageType listenerCb:(id<BindingsChannelMessageReceptionCallback> _Nullable)listenerCb error:(NSError* _Nullable* _Nullable)error;
/**
 * ReplayChannel replays all messages from the channel within the network's
memory (~3 weeks) over the event model.

Parameters:
 - marshalledChanId - A JSON marshalled channel ID ([id.ID]).
 */
- (BOOL)replayChannel:(NSData* _Nullable)marshalledChanId error:(NSError* _Nullable* _Nullable)error;
/**
 * SendAdminGeneric is used to send a raw message over a channel encrypted with
admin keys, identifying it as sent by the admin. In general, it should be
wrapped in a function that defines the wire protocol. If the final message,
before being sent over the wire, is too long, this will return an error. The
message must be at most 510 bytes long.

Parameters:
 - adminPrivateKey - The PEM-encoded admin RSA private key.
 - marshalledChanId - A JSON marshalled channel ID ([id.ID]).
 - messageType - The message type of the message. This will be a valid
   [channels.MessageType].
 - message - The contents of the message. The message should be at most 510
   bytes. This need not be of data type string, as the message could be a
   specified format that the channel may recognize.
 - leaseTimeMS - The lease of the message. This will be how long the message
   is valid until, in milliseconds. As per the channels.Manager
   documentation, this has different meanings depending on the use case.
   These use cases may be generic enough that they will not be enumerated
   here.
 - cmixParamsJSON - A JSON marshalled [xxdk.CMIXParams]. This may be empty,
   and GetDefaultCMixParams will be used internally.

Returns:
 - []byte - A JSON marshalled ChannelSendReport.
 */
- (NSData* _Nullable)sendAdminGeneric:(NSData* _Nullable)adminPrivateKey marshalledChanId:(NSData* _Nullable)marshalledChanId messageType:(long)messageType message:(NSData* _Nullable)message leaseTimeMS:(int64_t)leaseTimeMS cmixParamsJSON:(NSData* _Nullable)cmixParamsJSON error:(NSError* _Nullable* _Nullable)error;
/**
 * SendGeneric is used to send a raw message over a channel. In general, it
should be wrapped in a function that defines the wire protocol. If the final
message, before being sent over the wire, is too long, this will return an
error. Due to the underlying encoding using compression, it isn't possible to
define the largest payload that can be sent, but it will always be possible
to send a payload of 802 bytes at minimum. The meaning of validUntil depends
on the use case.

Parameters:
 - marshalledChanId - A JSON marshalled channel ID ([id.ID]).
 - messageType - The message type of the message. This will be a valid
   [channels.MessageType].
 - message - The contents of the message. This need not be of data type
   string, as the message could be a specified format that the channel may
   recognize.
 - leaseTimeMS - The lease of the message. This will be how long the message
   is valid until, in milliseconds. As per the channels.Manager
   documentation, this has different meanings depending on the use case.
   These use cases may be generic enough that they will not be enumerated
   here.
 - cmixParamsJSON - A JSON marshalled [xxdk.CMIXParams]. This may be empty,
   and GetDefaultCMixParams will be used internally.

Returns:
 - []byte - A JSON marshalled ChannelSendReport.
 */
- (NSData* _Nullable)sendGeneric:(NSData* _Nullable)marshalledChanId messageType:(long)messageType message:(NSData* _Nullable)message leaseTimeMS:(int64_t)leaseTimeMS cmixParamsJSON:(NSData* _Nullable)cmixParamsJSON error:(NSError* _Nullable* _Nullable)error;
/**
 * SendMessage is used to send a formatted message over a channel.
Due to the underlying encoding using compression, it isn't possible to define
the largest payload that can be sent, but it will always be possible to send
a payload of 798 bytes at minimum.

The message will auto delete validUntil after the round it is sent in,
lasting forever if [channels.ValidForever] is used.

Parameters:
 - marshalledChanId - A JSON marshalled channel ID ([id.ID]).
 - message - The contents of the message. The message should be at most 510
   bytes. This is expected to be Unicode, and thus a string data type is
   expected
 - leaseTimeMS - The lease of the message. This will be how long the message
   is valid until, in milliseconds. As per the channels.Manager
   documentation, this has different meanings depending on the use case.
   These use cases may be generic enough that they will not be enumerated
   here.
 - cmixParamsJSON - A JSON marshalled [xxdk.CMIXParams]. This may be
   empty, and GetDefaultCMixParams will be used internally.

Returns:
 - []byte - A JSON marshalled ChannelSendReport
 */
- (NSData* _Nullable)sendMessage:(NSData* _Nullable)marshalledChanId message:(NSString* _Nullable)message leaseTimeMS:(int64_t)leaseTimeMS cmixParamsJSON:(NSData* _Nullable)cmixParamsJSON error:(NSError* _Nullable* _Nullable)error;
/**
 * SendReaction is used to send a reaction to a message over a channel.
The reaction must be a single emoji with no other characters, and will
be rejected otherwise.
Users will drop the reaction if they do not recognize the reactTo message.

Parameters:
 - marshalledChanId - A JSON marshalled channel ID ([id.ID]).
 - reaction - The user's reaction. This should be a single emoji with no
   other characters. As such, a Unicode string is expected.
 - messageToReactTo - The marshalled [channel.MessageID] of the message you
   wish to reply to. This may be found in the ChannelSendReport if replying
   to your own. Alternatively, if reacting to another user's message, you may
   retrieve it via the ChannelMessageReceptionCallback registered using
   RegisterReceiveHandler.
 - cmixParamsJSON - A JSON marshalled [xxdk.CMIXParams]. This may be empty,
 and GetDefaultCMixParams will be used internally.

Returns:
 - []byte - A JSON marshalled ChannelSendReport.
 */
- (NSData* _Nullable)sendReaction:(NSData* _Nullable)marshalledChanId reaction:(NSString* _Nullable)reaction messageToReactTo:(NSData* _Nullable)messageToReactTo cmixParamsJSON:(NSData* _Nullable)cmixParamsJSON error:(NSError* _Nullable* _Nullable)error;
/**
 * SendReply is used to send a formatted message over a channel. Due to the
underlying encoding using compression, it isn't possible to define the
largest payload that can be sent, but it will always be possible to send a
payload of 766 bytes at minimum.

If the message ID the reply is sent to is nonexistent, the other side will
post the message as a normal message and not a reply. The message will auto
delete validUntil after the round it is sent in, lasting forever if
[channels.ValidForever] is used.

Parameters:
 - marshalledChanId - A JSON marshalled channel ID ([id.ID]).
 - message - The contents of the message. The message should be at most 510
   bytes. This is expected to be Unicode, and thus a string data type is
   expected.
 - messageToReactTo - The marshalled [channel.MessageID] of the message you
   wish to reply to. This may be found in the ChannelSendReport if replying
   to your own. Alternatively, if reacting to another user's message, you may
   retrieve it via the ChannelMessageReceptionCallback registered using
   RegisterReceiveHandler.
 - leaseTimeMS - The lease of the message. This will be how long the message
   is valid until, in milliseconds. As per the channels.Manager
   documentation, this has different meanings depending on the use case.
   These use cases may be generic enough that they will not be enumerated
   here.
 - cmixParamsJSON - A JSON marshalled [xxdk.CMIXParams]. This may be empty,
   and GetDefaultCMixParams will be used internally.

Returns:
 - []byte - A JSON marshalled ChannelSendReport
 */
- (NSData* _Nullable)sendReply:(NSData* _Nullable)marshalledChanId message:(NSString* _Nullable)message messageToReactTo:(NSData* _Nullable)messageToReactTo leaseTimeMS:(int64_t)leaseTimeMS cmixParamsJSON:(NSData* _Nullable)cmixParamsJSON error:(NSError* _Nullable* _Nullable)error;
/**
 * SetNickname sets the nickname for a given channel. The nickname must be valid
according to [IsNicknameValid].
 */
- (BOOL)setNickname:(NSString* _Nullable)newNick ch:(NSData* _Nullable)ch error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * Cmix wraps the xxdk.Cmix struct, implementing additional functions to support
the bindings Cmix interface.
 */
@interface BindingsCmix : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * AddHealthCallback adds a callback that gets called whenever the network
health changes. Returns a registration ID that can be used to unregister.
 */
- (int64_t)addHealthCallback:(id<BindingsNetworkHealthCallback> _Nullable)nhc;
/**
 * ChangeNumberOfNodeRegistrations changes the number of parallel node
registrations up to the initialized maximum.

Parameters:
  - toRun - The number of parallel node registrations.
  - timeoutMS - The timeout, in milliseconds, to wait when changing node
    registrations before failing.
 */
- (BOOL)changeNumberOfNodeRegistrations:(long)toRun timeoutMS:(long)timeoutMS error:(NSError* _Nullable* _Nullable)error;
/**
 * Connect performs auth key negotiation with the given recipient and returns a
Connection object for the newly created partner.Manager.

This function is to be used sender-side and will block until the
partner.Manager is confirmed.

Parameters:
 - e2eId - ID of the E2E object in the e2e tracker
 - recipientContact - marshalled contact.Contact object
 - e2eParamsJSON - JSON marshalled byte of xxdk.E2EParams object
 */
- (BindingsConnection* _Nullable)connect:(long)e2eId recipientContact:(NSData* _Nullable)recipientContact e2eParamsJSON:(NSData* _Nullable)e2eParamsJSON error:(NSError* _Nullable* _Nullable)error;
- (BindingsAuthenticatedConnection* _Nullable)connectWithAuthentication:(long)e2eId recipientContact:(NSData* _Nullable)recipientContact e2eParamsJSON:(NSData* _Nullable)e2eParamsJSON error:(NSError* _Nullable* _Nullable)error;
/**
 * GetID returns the ID for this Cmix in the cmixTracker.
 */
- (long)getID;
/**
 * GetNodeRegistrationStatus returns the current state of node registration.

Returns:
  - []byte - A marshalled NodeRegistrationReport containing the number of
    nodes the user is registered with and the number of nodes present in the
    NDF.
  - An error if it cannot get the node registration status. The most likely
    cause is that the network is unhealthy.
 */
- (NSData* _Nullable)getNodeRegistrationStatus:(NSError* _Nullable* _Nullable)error;
/**
 * GetReceptionRegistrationValidationSignature returns the signature provided by
the xx network.
 */
- (NSData* _Nullable)getReceptionRegistrationValidationSignature;
/**
 * GetRunningProcesses returns the names of all running processes at the time
of this call. Note that this list may change and is subject to race
conditions if multiple threads are in the process of starting or stopping.

Returns:
  - []byte - A JSON marshalled list of all running processes.

JSON Example:

	{
	  "FileTransfer{BatchBuilderThread, FilePartSendingThread#0, FilePartSendingThread#1, FilePartSendingThread#2, FilePartSendingThread#3}",
	  "MessageReception Worker 0"
	}
 */
- (NSData* _Nullable)getRunningProcesses:(NSError* _Nullable* _Nullable)error;
/**
 * HasRunningProcessies checks if any background threads are running and returns
true if one or more are.

This is meant to be used when NetworkFollowerStatus returns xxdk.Stopping.
Due to the handling of comms on iOS, where the OS can block indefinitely, it
may not enter the stopped state appropriately. This can be used instead.
 */
- (BOOL)hasRunningProcessies;
/**
 * IsHealthy returns true if the network is read to be in a healthy state where
messages can be sent.
 */
- (BOOL)isHealthy;
/**
 * IsReady returns true if at least percentReady of node registrations has
completed. If not all have completed, then it returns false and howClose will
be a percent (0-1) of node registrations completed.

Parameters:
  - percentReady - The percentage of nodes required to be registered with to
    be ready. This is a number between 0 and 1.

Returns:
  - JSON of [IsReadyInfo].
 */
- (NSData* _Nullable)isReady:(double)percentReady error:(NSError* _Nullable* _Nullable)error;
/**
 * MakeLegacyReceptionIdentity generates the legacy identity for receiving
messages. As with all legacy calls, this should primarily be used
for the xx messenger team.
 */
- (NSData* _Nullable)makeLegacyReceptionIdentity:(NSError* _Nullable* _Nullable)error;
/**
 * MakeReceptionIdentity generates a new cryptographic identity for receiving
messages.
 */
- (NSData* _Nullable)makeReceptionIdentity:(NSError* _Nullable* _Nullable)error;
/**
 * NetworkFollowerStatus gets the state of the network follower. It returns a
status with the following values:

	Stopped  - 0
	Running  - 2000
	Stopping - 3000
 */
- (long)networkFollowerStatus;
/**
 * PauseNodeRegistrations stops all node registrations and returns a function to
resume them.

Parameters:
  - timeoutMS - The timeout, in milliseconds, to wait when stopping threads
    before failing.
 */
- (BOOL)pauseNodeRegistrations:(long)timeoutMS error:(NSError* _Nullable* _Nullable)error;
/**
 * ReadyToSend determines if the network is ready to send messages on. It
returns true if the network is healthy and if the client has registered with
at least 70% of the nodes. Returns false otherwise.
 */
- (BOOL)readyToSend;
/**
 * RegisterClientErrorCallback registers the callback to handle errors from the
long-running threads controlled by StartNetworkFollower and
StopNetworkFollower.
 */
- (void)registerClientErrorCallback:(id<BindingsClientError> _Nullable)clientError;
/**
 * RemoveHealthCallback removes a health callback using its registration ID.
 */
- (void)removeHealthCallback:(int64_t)funcID;
/**
 * StartNetworkFollower kicks off the tracking of the network. It starts long-
running network threads and returns an object for checking state and
stopping those threads.

Call this when returning from sleep and close when going back to sleep.

These threads may become a significant drain on battery when offline, ensure
they are stopped if there is no internet access.

Threads Started:
  - Network Follower (/network/follow.go)
    tracks the network events and hands them off to workers for handling.
  - Historical Round Retrieval (/network/rounds/historical.go)
    retrieves data about rounds that are too old to be stored by the client.
  - Message Retrieval Worker Group (/network/rounds/retrieve.go)
    requests all messages in a given round from the gateway of the last nodes.
  - Message Handling Worker Group (/network/message/handle.go)
    decrypts and partitions messages when signals via the Switchboard.
  - Health Tracker (/network/health),
    via the network instance, tracks the state of the network.
  - Garbled Messages (/network/message/garbled.go)
    can be signaled to check all recent messages that could be decoded. It
    uses a message store on disk for persistence.
  - Critical Messages (/network/message/critical.go)
    ensures all protocol layer mandatory messages are sent. It uses a message
    store on disk for persistence.
  - KeyExchange Trigger (/keyExchange/trigger.go)
    responds to sent rekeys and executes them.
  - KeyExchange Confirm (/keyExchange/confirm.go)
    responds to confirmations of successful rekey operations.
  - Auth Callback (/auth/callback.go)
    handles both auth confirm and requests.
 */
- (BOOL)startNetworkFollower:(long)timeoutMS error:(NSError* _Nullable* _Nullable)error;
/**
 * StopNetworkFollower stops the network follower if it is running. It returns
an error if the follower is in the wrong state to stop or if it fails to stop
it.

If the network follower is running and this fails, the Cmix object will
most likely be in an unrecoverable state and need to be trashed.
 */
- (BOOL)stopNetworkFollower:(NSError* _Nullable* _Nullable)error;
/**
 * TrackServices will return via a callback the list of services the
backend keeps track of, which is formally referred to as a
[message.ServiceList]. This may be passed into other bindings call which
may need context on the available services for this client. This will
provide services for all identities that the client tracks.

Parameters:
  - cb - A TrackServicesCallback, which will be passed the marshalled
    message.ServiceList.
 */
- (void)trackServices:(id<BindingsTrackServicesCallback> _Nullable)cb;
/**
 * TrackServicesWithIdentity will return via a callback the list of services the
backend keeps track of for the provided identity. This may be passed into
other bindings call which may need context on the available services for this
single identity. This will only return services for the given identity.

Parameters:
  - e2eID - e2e object ID in the tracker.
  - cb - A TrackServicesCallback, which will be passed the marshalled
    message.ServiceList.
 */
- (BOOL)trackServicesWithIdentity:(long)e2eId cb:(id<BindingsTrackServicesCallback> _Nullable)cb error:(NSError* _Nullable* _Nullable)error;
/**
 * WaitForNetwork will block until either the network is healthy or the passed
timeout is reached. It will return true if the network is healthy.
 */
- (BOOL)waitForNetwork:(long)timeoutMS;
/**
 * WaitForRoundResult allows the caller to get notified if the rounds a message
was sent in successfully completed. Under the hood, this uses an API that
uses the internal round data, network historical round lookup, and waiting on
network events to determine what has (or will) occur.

This function takes the marshaled send report to ensure a memory leak does
not occur as a result of both sides of the bindings holding a reference to
the same pointer.

Parameters:
 - roundList - JSON marshalled bytes of RoundsList or JSON of any send report
   that inherits a [bindings.RoundsList] object
 - mdc - callback that adheres to the MessageDeliveryCallback interface
 - timeoutMS - timeout when the callback will return if no state update
   occurs, in milliseconds
 */
- (BOOL)waitForRoundResult:(NSData* _Nullable)roundList mdc:(id<BindingsMessageDeliveryCallback> _Nullable)mdc timeoutMS:(long)timeoutMS error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * Connection is the bindings' representation of a connect.Connection object
that can be tracked by ID.
 */
@interface BindingsConnection : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Close deletes this Connection's partner.Manager and releases resources.
 */
- (BOOL)close:(NSError* _Nullable* _Nullable)error;
/**
 * GetId returns the Connection ID.
 */
- (long)getId;
/**
 * GetPartner returns the partner.Manager for this Connection.
 */
- (NSData* _Nullable)getPartner;
/**
 * RegisterListener is used for E2E reception and allows for reading data sent
from the partner.Manager.
 */
- (BOOL)registerListener:(long)messageType newListener:(id<BindingsListener> _Nullable)newListener error:(NSError* _Nullable* _Nullable)error;
/**
 * SendE2E is a wrapper for sending specifically to the Connection's
partner.Manager.

Returns:
 - []byte - the JSON marshalled bytes of the E2ESendReport object, which can
   be passed into Cmix.WaitForRoundResult to see if the send succeeded.
 */
- (NSData* _Nullable)sendE2E:(long)mt payload:(NSData* _Nullable)payload error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * DummyTraffic is the bindings-layer dummy (or "cover") traffic manager. T
The manager can be used to set and get the status of the thread responsible for
sending dummy messages.
 */
@interface BindingsDummyTraffic : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewDummyTrafficManager creates a DummyTraffic manager and initialises the
dummy traffic sending thread. Note that the manager does not start sending
dummy traffic until true is passed into DummyTraffic.SetStatus. The time
duration between each sending operation and the amount of messages sent each
interval are randomly generated values with bounds defined by the given
parameters below.

Parameters:
 - cmixId - a Cmix object ID in the tracker.
 - maxNumMessages - the upper bound of the random number of messages sent
   each sending cycle.  Suggested value: 5.
 - avgSendDeltaMS - the average duration, in milliseconds, to wait between
   sends.  Suggested value: 60000.
 - randomRangeMS - the upper bound of the interval between sending cycles, in
   milliseconds. Sends occur every avgSendDeltaMS +/- a random duration with
   an upper bound of randomRangeMS.  Suggested value: 1000.
 */
- (nullable instancetype)initManager:(long)cmixId maxNumMessages:(long)maxNumMessages avgSendDeltaMS:(long)avgSendDeltaMS randomRangeMS:(long)randomRangeMS;
/**
 * GetStatus returns the current state of the DummyTraffic manager's sending
thread. Note that this function does not return the status set by the most
recent call to SetStatus. Instead, this call returns the current status of
the sending thread. This is due to the small delay that may occur between
calling SetStatus and the sending thread taking into effect that status
change.

Returns:
  - bool - Returns true if sending thread is sending dummy messages and false
    if sending thread is paused/stopped and is not sending dummy messages.
 */
- (BOOL)getStatus;
/**
 * SetStatus sets the state of the DummyTraffic manager's send thread by passing
in a boolean parameter. There may be a small delay in between this call and
the status of the sending thread to change accordingly. For example, passing
false into this call while the sending thread is currently sending messages
will not cancel nor halt the sending operation, but will pause the thread
once that operation has completed.

Parameters:
 - status - Input should be true if you want to send dummy messages and false
   if you want to pause dummy messages.

Returns:
 - error - if the DummyTraffic.SetStatus is called too frequently, causing
   the internal status channel to fill.
 */
- (BOOL)setStatus:(BOOL)status error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * E2ESendReport is the bindings' representation of the return values of
SendE2E.

E2ESendReport Example JSON:
 {
		"Rounds": [ 1, 4, 9],
     "RoundURL":"https://dashboard.xx.network/rounds/25?xxmessenger=true",
		"MessageID": "iM34yCIr4Je8ZIzL9iAAG1UWAeDiHybxMTioMAaezvs=",
		"Timestamp": 1661532254302612000,
		"KeyResidue": "9q2/A69EAuFM1hFAT7Bzy5uGOQ4T6bPFF72h5PlgCWE="
 }
 */
@interface BindingsE2ESendReport : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped field E2ESendReport.RoundsList with unsupported type: gitlab.com/elixxir/client/v4/bindings.RoundsList

@property (nonatomic) NSString* _Nonnull roundURL;
@property (nonatomic) NSData* _Nullable messageID;
@property (nonatomic) int64_t timestamp;
@property (nonatomic) NSData* _Nullable keyResidue;
- (NSData* _Nullable)marshal:(NSError* _Nullable* _Nullable)error;
@end

/**
 * E2e wraps the xxdk.E2e, implementing additional functions to support the
bindings E2e interface.
 */
@interface BindingsE2e : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * AddPartnerCallback adds a new callback that overrides the generic auth
callback for the given partner ID.

Parameters:
 - partnerID - the marshalled bytes of the id.ID object.
 */
- (BOOL)addPartnerCallback:(NSData* _Nullable)partnerID cb:(id<BindingsAuthCallbacks> _Nullable)cb error:(NSError* _Nullable* _Nullable)error;
/**
 * AddService adds a service for all partners of the given tag, which will call
back on the given processor. These can be sent to using the tag fields in the
Params object.

Passing nil for the processor allows you to create a service that is never
called but will be visible by notifications. Processes added this way are
generally not end-to-end encrypted messages themselves, but other protocols
that piggyback on e2e relationships to start communication.
 */
- (BOOL)addService:(NSString* _Nullable)tag processor:(id<BindingsProcessor> _Nullable)processor error:(NSError* _Nullable* _Nullable)error;
/**
 * CallAllReceivedRequests will iterate through all pending contact requests and
replay them on the callbacks.
 */
- (void)callAllReceivedRequests;
/**
 * Confirm sends a confirmation for a received request. It can only be called
once. This both sends keying material to the other party and creates a
channel in the e2e handler, after which e2e messages can be sent to the
partner using E2e.SendE2E.

The round the request is initially sent on will be returned, but the request
will be listed as a critical message, so the underlying cMix client will auto
resend it in the event of failure.

A confirmation cannot be sent for a contact who has not sent a request or who
is already a partner. This can only be called once for a specific contact.
The confirmation sends as a critical message; if the round it sends on fails,
it will be auto resent by the cMix client.

If the confirmation must be resent, use ReplayConfirm.

Parameters:
 - partnerContact - the marshalled bytes of the contact.Contact object.

Returns:
 - int64 - ID of the round (convert to uint64)
 */
- (BOOL)confirm:(NSData* _Nullable)partnerContact ret0_:(int64_t* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
/**
 * DeleteAllRequests clears all requests from auth storage.
 */
- (BOOL)deleteAllRequests:(NSError* _Nullable* _Nullable)error;
/**
 * DeleteContact removes a partner from E2e's storage.

Parameters:
 - partnerID - the marshalled bytes of id.ID.
 */
- (BOOL)deleteContact:(NSData* _Nullable)partnerID error:(NSError* _Nullable* _Nullable)error;
/**
 * DeletePartnerCallback deletes the callback that overrides the generic
auth callback for the given partner ID.

Parameters:
 - partnerID - the marshalled bytes of the id.ID object.
 */
- (BOOL)deletePartnerCallback:(NSData* _Nullable)partnerID error:(NSError* _Nullable* _Nullable)error;
/**
 * DeleteReceiveRequests clears all received requests from auth storage.
 */
- (BOOL)deleteReceiveRequests:(NSError* _Nullable* _Nullable)error;
/**
 * DeleteRequest deletes sent or received requests for a specific partner ID.

Parameters:
 - partnerID - the marshalled bytes of the id.ID object.
 */
- (BOOL)deleteRequest:(NSData* _Nullable)partnerID error:(NSError* _Nullable* _Nullable)error;
/**
 * DeleteSentRequests clears all sent requests from auth storage.
 */
- (BOOL)deleteSentRequests:(NSError* _Nullable* _Nullable)error;
/**
 * FirstPartitionSize returns the max partition payload size for the first
payload.
 */
- (long)firstPartitionSize;
/**
 * GetAllPartnerIDs returns a list of all partner IDs that the user has an E2E
relationship with.

Returns:
 - []byte - the marshalled bytes of []*id.ID.
 */
- (NSData* _Nullable)getAllPartnerIDs:(NSError* _Nullable* _Nullable)error;
/**
 * GetContact returns a marshalled contact.Contact object for the E2e
ReceptionIdentity.
 */
- (NSData* _Nullable)getContact;
/**
 * GetHistoricalDHPrivkey returns the user's marshalled historical DH private
key.

Returns:
 - []byte - the marshalled bytes of the cyclic.Int object.
 */
- (NSData* _Nullable)getHistoricalDHPrivkey:(NSError* _Nullable* _Nullable)error;
/**
 * GetHistoricalDHPubkey returns the user's marshalled historical DH public key.

Returns:
 - []byte - the marshalled bytes of the cyclic.Int object.
 */
- (NSData* _Nullable)getHistoricalDHPubkey:(NSError* _Nullable* _Nullable)error;
/**
 * GetID returns the ID for this E2e in the e2eTracker.
 */
- (long)getID;
/**
 * GetReceivedRequest returns a contact if there is a received request for it.

Parameters:
 - partnerID - the marshalled bytes of the id.ID object.

Returns:
 - []byte - the marshalled bytes of the contact.Contact object.
 */
- (NSData* _Nullable)getReceivedRequest:(NSData* _Nullable)partnerID error:(NSError* _Nullable* _Nullable)error;
/**
 * GetReceptionID returns the marshalled default IDs.

Returns:
 - []byte - the marshalled bytes of the id.ID object.
 */
- (NSData* _Nullable)getReceptionID;
/**
 * GetUdAddressFromNdf retrieve the User Discovery's network address fom the
NDF.
 */
- (NSString* _Nonnull)getUdAddressFromNdf;
/**
 * GetUdCertFromNdf retrieves the User Discovery's TLS certificate (in PEM
format) from the NDF.
 */
- (NSData* _Nullable)getUdCertFromNdf;
/**
 * GetUdContactFromNdf assembles the User Discovery's contact file from the data
within the NDF.

Returns
 - []byte - A byte marshalled contact.Contact.
 */
- (NSData* _Nullable)getUdContactFromNdf:(NSError* _Nullable* _Nullable)error;
/**
 * HasAuthenticatedChannel returns true if an authenticated channel with the
partner exists, otherwise returns false.

Parameters:
 - partnerId - the marshalled bytes of the id.ID object.
 */
- (BOOL)hasAuthenticatedChannel:(NSData* _Nullable)partnerId ret0_:(BOOL* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
/**
 * PartitionSize returns the partition payload size for the given payload index.
The first payload is index 0.
 */
- (long)partitionSize:(long)payloadIndex;
/**
 * PayloadSize returns the max payload size for a partitionable E2E message.
 */
- (long)payloadSize;
/**
 * RegisterListener registers a new listener.

Parameters:
 - senderId - the user ID who sends messages to this user that
   this function will register a listener for.
 - messageType - message type from the sender you want to listen for.
 - newListener: A provider for a callback to hear a message.
   Do not pass nil to this.
 */
- (BOOL)registerListener:(NSData* _Nullable)senderID messageType:(long)messageType newListener:(id<BindingsListener> _Nullable)newListener error:(NSError* _Nullable* _Nullable)error;
/**
 * RemoveService removes all services for the given tag.
 */
- (BOOL)removeService:(NSString* _Nullable)tag error:(NSError* _Nullable* _Nullable)error;
/**
 * ReplayConfirm resends a confirmation to the partner. It will fail to send if
the send relationship with the partner has already ratcheted.

The confirmation sends as a critical message; if the round it sends on fails,
it will be auto resent by the cMix client.

This will not be useful if either side has ratcheted.

Parameters:
 - partnerID - the marshalled bytes of the id.ID object.

Returns:
 - int64 - ID of the round (convert to uint64)
 */
- (BOOL)replayConfirm:(NSData* _Nullable)partnerID ret0_:(int64_t* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
/**
 * Request sends a contact request from the user identity in the imported E2e
structure to the passed contact, as well as the passed facts (it will error
if they are too long).

The other party must accept the request by calling Confirm to be able to send
messages using E2e.SendE2E. When the other party does so, the "confirm"
callback will get called.

The round the request is initially sent on will be returned, but the request
will be listed as a critical message, so the underlying cMix client will auto
resend it in the event of failure.

A request cannot be sent for a contact who has already received a request or
who is already a partner.

The request sends as a critical message, if the round it sends on fails, it
will be auto resent by the cMix client.

Parameters:
 - partnerContact - the marshalled bytes of the contact.Contact object.
 - factsListJson - the JSON marshalled bytes of [fact.FactList].

Returns:
 - int64 - ID of the round (convert to uint64)
 */
- (BOOL)request:(NSData* _Nullable)partnerContact factsListJson:(NSData* _Nullable)factsListJson ret0_:(int64_t* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
/**
 * Reset sends a contact reset request from the user identity in the imported
e2e structure to the passed contact, as well as the passed facts (it will
error if they are too long).

This deletes all traces of the relationship with the partner from e2e and
create a new relationship from scratch.

The round the reset is initially sent on will be returned, but the request
will be listed as a critical message, so the underlying cMix client will auto
resend it in the event of failure.

A request cannot be sent for a contact who has already received a request or
who is already a partner.

Parameters:
 - partnerContact - the marshalled bytes of the contact.Contact object.

Returns:
 - int64 - ID of the round (convert to uint64)
 */
- (BOOL)reset:(NSData* _Nullable)partnerContact ret0_:(int64_t* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
/**
 * SecondPartitionSize returns the max partition payload size for all payloads
after the first payload.
 */
- (long)secondPartitionSize;
/**
 * SendE2E send a message containing the payload to the recipient of the passed
message type, per the given parameters--encrypted with end-to-end encryption.

Parameters:
 - recipientId - the marshalled bytes of the id.ID object.
 - e2eParams - the marshalled bytes of the e2e.Params object.

Returns:
 - []byte - the JSON marshalled bytes of the E2ESendReport object, which can
   be passed into Cmix.WaitForRoundResult to see if the send succeeded.
 */
- (NSData* _Nullable)sendE2E:(long)messageType recipientId:(NSData* _Nullable)recipientId payload:(NSData* _Nullable)payload e2eParamsJSON:(NSData* _Nullable)e2eParamsJSON error:(NSError* _Nullable* _Nullable)error;
/**
 * VerifyOwnership checks if the received ownership proof is valid.

Parameters:
 - receivedContact, verifiedContact - the marshalled bytes of the
     contact.Contact object.
 - e2eId - ID of the e2e handler
 */
- (BOOL)verifyOwnership:(NSData* _Nullable)receivedContact verifiedContact:(NSData* _Nullable)verifiedContact e2eId:(long)e2eId ret0_:(BOOL* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * EventReport is a public struct which represents the contents of an event
report.

Example JSON:
 {
  "Priority": 1,
  "Category": "Test Events",
  "EventType": "Ping",
  "Details": "This is an example of an event report"
 }
 */
@interface BindingsEventReport : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) long priority;
@property (nonatomic) NSString* _Nonnull category;
@property (nonatomic) NSString* _Nonnull eventType;
@property (nonatomic) NSString* _Nonnull details;
@end

/**
 * FilePartTracker contains the fileTransfer.FilePartTracker.
 */
@interface BindingsFilePartTracker : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * GetNumParts returns the total number of file parts in the transfer.
 */
- (long)getNumParts;
/**
 * GetPartStatus returns the status of the file part with the given part number.

The possible values for the status are:
 - 0 < Part does not exist
 - 0 = unsent
 - 1 = arrived (sender has sent a part, and it has arrived)
 - 2 = received (receiver has received a part)
 */
- (long)getPartStatus:(long)partNum;
@end

/**
 * FileSend contains the file and its metadata to send. This structure is JSON
marshalled and passed as the payload to [FileTransfer.Send].

Example JSON:
 {
   "Name": "testfile.txt",
   "Type": "text file",
   "Preview": "RMlsZSBwCmV2aWV3Lg==",
   "Contents": "RMlsZSBjb250ZW50cy4="
 }
 */
@interface BindingsFileSend : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Name is the human-readable file name. Get max length from
[FileTransfer.MaxFileNameLen].
 */
@property (nonatomic) NSString* _Nonnull name;
/**
 * Type is a shorthand that identifies the type of file. Get max length from
[FileTransfer.MaxFileTypeLen].
 */
@property (nonatomic) NSString* _Nonnull type;
/**
 * Preview of the file data (e.g. a thumbnail). Get max length from
[FileTransfer.MaxPreviewSize].
 */
@property (nonatomic) NSData* _Nullable preview;
/**
 * Contents is the full file contents. Get max length from
[FileTransfer.MaxFileSize].
 */
@property (nonatomic) NSData* _Nullable contents;
@end

/**
 * FileTransfer object is a bindings-layer struct which wraps a
[fileTransfer.FileTransfer] interface.
 */
@interface BindingsFileTransfer : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * CloseSend deletes a file from the internal storage once a transfer has
completed or reached the retry limit. If neither of those condition are met,
an error is returned.

This function should be called once a transfer completes or errors out (as
reported by the progress callback).

Parameters:
 - tidBytes - the file transfer's unique [fileTransfer.TransferID].
 */
- (BOOL)closeSend:(NSData* _Nullable)tidBytes error:(NSError* _Nullable* _Nullable)error;
/**
 * MaxFileNameLen returns the max number of bytes allowed for a file name.
 */
- (long)maxFileNameLen;
/**
 * MaxFileSize returns the max number of bytes allowed for a file.
 */
- (long)maxFileSize;
/**
 * MaxFileTypeLen returns the max number of bytes allowed for a file type.
 */
- (long)maxFileTypeLen;
/**
 * MaxPreviewSize returns the max number of bytes allowed for a file preview.
 */
- (long)maxPreviewSize;
/**
 * Receive returns the full file on the completion of the transfer. It deletes
internal references to the data and unregisters any attached progress
callback. Returns an error if the transfer is not complete, the full file
cannot be verified, or if the transfer cannot be found.

Receive can only be called once the progress callback returns that the file
transfer is complete.

Parameters:
 - tidBytes - The file transfer's unique [fileTransfer.TransferID].
 */
- (NSData* _Nullable)receive:(NSData* _Nullable)tidBytes error:(NSError* _Nullable* _Nullable)error;
/**
 * RegisterReceivedProgressCallback allows for the registration of a callback to
track the progress of an individual received file transfer.

The callback will be called immediately when added to report the current
progress of the transfer. It will then call every time a file part is
received, the transfer completes, or a fatal error occurs. It is called at
most once every period regardless of the number of progress updates.

In the event that the client is closed and resumed, this function must be
used to re-register any callbacks previously registered.

Once the callback reports that the transfer has completed, the recipient can
get the full file by calling Receive.

Parameters:
 - tidBytes - The file transfer's unique [fileTransfer.TransferID].
 - callback - A callback that reports the progress of the file transfer. The
   callback is called once on initialization, on every progress update (or
   less if restricted by the period), or on fatal error.
 - period - The progress callback will be limited from triggering only once
   per period. It is a duration in milliseconds. This value should depend on
   how frequently you want to receive updates, and should be tuned to your
   implementation.
 */
- (BOOL)registerReceivedProgressCallback:(NSData* _Nullable)tidBytes callback:(id<BindingsFileTransferReceiveProgressCallback> _Nullable)callback period:(long)period error:(NSError* _Nullable* _Nullable)error;
/**
 * RegisterSentProgressCallback allows for the registration of a callback to
track the progress of an individual sent file transfer.

The callback will be called immediately when added to report the current
progress of the transfer. It will then call every time a file part
arrives, the transfer completes, or a fatal error occurs. It is called at
most once every period regardless of the number of progress updates.

In the event that the client is closed and resumed, this function must be
used to re-register any callbacks previously registered with this
function or Send.

Parameters:
 - tidBytes - The file transfer's unique [fileTransfer.TransferID].
 - callback - A callback that reports the progress of the file transfer. The
   callback is called once on initialization, on every progress update (or
   less if restricted by the period), or on fatal error.
 - period - The progress callback will be limited from triggering only once
   per period. It is a duration in milliseconds. This value should depend on
   how frequently you want to receive updates, and should be tuned to your
   implementation.
 */
- (BOOL)registerSentProgressCallback:(NSData* _Nullable)tidBytes callback:(id<BindingsFileTransferSentProgressCallback> _Nullable)callback period:(long)period error:(NSError* _Nullable* _Nullable)error;
/**
 * Send initiates the sending of a file to a recipient and returns a transfer ID
that uniquely identifies this file transfer. Progress for the file transfer
is reported to that passed in callback.

Parameters:
 - payload - JSON of [FileSend], which contains the file contents and its
   metadata.
 - recipientID - marshalled bytes of the recipient's [id.ID].
 - retry - The number of sending retries allowed on send failure (e.g. a
   retry of 2.0 with 6 parts means 12 total possible sends).
 - callback - A callback that reports the progress of the file transfer. The
   callback is called once on initialization, on every progress update (or
   less if restricted by the period), or on fatal error.
 - period - The progress callback will be limited from triggering only once
   per period. It is a duration in milliseconds. This value should depend on
   how frequently you want to receive updates, and should be tuned to your
   implementation.

Returns:
 - The bytes of the unique [fileTransfer.TransferID].
 */
- (NSData* _Nullable)send:(NSData* _Nullable)payload recipientID:(NSData* _Nullable)recipientID retry:(float)retry callback:(id<BindingsFileTransferSentProgressCallback> _Nullable)callback period:(long)period error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * Group structure contains the identifying and membership information of a
group chat.
 */
@interface BindingsGroup : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * GetCreatedMS returns the time the group was created in milliseconds. This is
also the time the group requests were sent.
 */
- (int64_t)getCreatedMS;
/**
 * GetCreatedNano returns the time the group was created in nanoseconds. This is
also the time the group requests were sent.
 */
- (int64_t)getCreatedNano;
/**
 * GetID return the 33-byte unique group ID. This represents the id.ID object.
 */
- (NSData* _Nullable)getID;
/**
 * GetInitMessage returns initial message sent with the group request.
 */
- (NSData* _Nullable)getInitMessage;
/**
 * GetMembership retrieves a list of group members. The list is in order;
the first contact is the leader/creator of the group.
All subsequent members are ordered by their ID.

Returns:
 - []byte - JSON marshalled [group.Membership], which is an array of
   [group.Member].

Example JSON [group.Membership] return:
 [
   {
     "ID": "U4x/lrFkvxuXu59LtHLon1sUhPJSCcnZND6SugndnVID",
     "DhKey": {
       "Value": 3534334367214237261,
       "Fingerprint": 16801541511233098363
     }
   },
   {
     "ID": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD",
     "DhKey": {
       "Value": 7497468244883513247,
       "Fingerprint": 16801541511233098363
     }
   }
 ]
 */
- (NSData* _Nullable)getMembership:(NSError* _Nullable* _Nullable)error;
/**
 * GetName returns the name set by the user for the group.
 */
- (NSData* _Nullable)getName;
/**
 * Serialize serializes the Group.
 */
- (NSData* _Nullable)serialize;
@end

/**
 * GroupChat is a binding-layer group chat manager.
 */
@interface BindingsGroupChat : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewGroupChat creates a bindings-layer group chat manager.

Parameters:
 - e2eID - e2e object ID in the tracker.
 - requestFunc - a callback to handle group chat requests.
 - processor - the group chat message processor.
 */
- (nullable instancetype)init:(long)e2eID requestFunc:(id<BindingsGroupRequest> _Nullable)requestFunc processor:(id<BindingsGroupChatProcessor> _Nullable)processor;
/**
 * GetGroup returns the group with the group ID. If no group exists, then the
error "failed to find group" is returned.

Parameters:
 - groupId - The byte data representing a group ID (a byte marshalled id.ID).
   This can be pulled from a marshalled GroupReport.
Returns:
 - Group - The bindings-layer representation of a group.
 */
- (BindingsGroup* _Nullable)getGroup:(NSData* _Nullable)groupId error:(NSError* _Nullable* _Nullable)error;
/**
 * GetGroups returns a list of group IDs that the user is a member of.

Returns:
 - []byte - a JSON marshalled []*id.ID representing all group ID's.
 */
- (NSData* _Nullable)getGroups:(NSError* _Nullable* _Nullable)error;
/**
 * JoinGroup allows a user to join a group when a request is received.
If an error is returned, handle it properly first; you may then retry later
with the same trackedGroupId.

Parameters:
 - serializedGroupData - the result of calling Group.Serialize() on
   any Group object returned over the bindings
 */
- (BOOL)joinGroup:(NSData* _Nullable)serializedGroupData error:(NSError* _Nullable* _Nullable)error;
/**
 * LeaveGroup deletes a group so a user no longer has access.

Parameters:
 - groupId - the byte data representing a group ID.
   This can be pulled from a marshalled GroupReport.
 */
- (BOOL)leaveGroup:(NSData* _Nullable)groupId error:(NSError* _Nullable* _Nullable)error;
/**
 * MakeGroup creates a new Group and sends a group request to all members in the
group.

Parameters:
 - membershipBytes - the JSON marshalled list of []*id.ID; it contains the
   IDs of members the user wants to add to the group.
 - message - the initial message sent to all members in the group. This is an
   optional parameter and may be nil.
 - name - the name of the group decided by the creator. This is an optional
   parameter and may be nil. If nil the group will be assigned the default
   name.

Returns:
 - []byte - the JSON marshalled bytes of the GroupReport object, which can be
   passed into Cmix.WaitForRoundResult to see if the group request message
   send succeeded.
 */
- (NSData* _Nullable)makeGroup:(NSData* _Nullable)membershipBytes message:(NSData* _Nullable)message name:(NSData* _Nullable)name error:(NSError* _Nullable* _Nullable)error;
/**
 * NumGroups returns the number of groups the user is a part of.
 */
- (long)numGroups;
/**
 * ResendRequest resends a group request to all members in the group.

Parameters:
 - groupId - a byte representation of a group's ID.
   This can be found in the report returned by GroupChat.MakeGroup.

Returns:
 - []byte - the JSON marshalled bytes of the GroupReport object, which can be
   passed into WaitForRoundResult to see if the group request message send
   succeeded.
 */
- (NSData* _Nullable)resendRequest:(NSData* _Nullable)groupId error:(NSError* _Nullable* _Nullable)error;
/**
 * Send is the bindings-level function for sending to a group.

Parameters:
 - groupId - the byte data representing a group ID. This can be pulled from
   marshalled GroupReport.
 - message - the message that the user wishes to send to the group.
 - tag - the tag associated with the message. This tag may be empty.

Returns:
 - []byte - the JSON marshalled bytes of the GroupSendReport object, which
   can be passed into Cmix.WaitForRoundResult to see if the group message
   send succeeded.
 */
- (NSData* _Nullable)send:(NSData* _Nullable)groupId message:(NSData* _Nullable)message tag:(NSString* _Nullable)tag error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * GroupChatMessage is the bindings layer representation of the
[groupChat.MessageReceive].

GroupChatMessage Example JSON:
 {
   "GroupId": "AAAAAAAJlasAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE",
   "SenderId": "AAAAAAAAB8gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD",
   "MessageId": "Zm9ydHkgZml2ZQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
   "Payload": "Zm9ydHkgZml2ZQ==",
   "Timestamp": 1663009269474079000
 }
 */
@interface BindingsGroupChatMessage : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * GroupId is the ID of the group that this message was sent on.
 */
@property (nonatomic) NSData* _Nullable groupId;
/**
 * SenderId is the ID of the sender of this message.
 */
@property (nonatomic) NSData* _Nullable senderId;
/**
 * MessageId is the ID of this group message.
 */
@property (nonatomic) NSData* _Nullable messageId;
/**
 * Payload is the content of the message.
 */
@property (nonatomic) NSData* _Nullable payload;
/**
 * Timestamp is the time this message was sent on.
 */
@property (nonatomic) int64_t timestamp;
@end

/**
 * GroupReport is returned when creating a new group and contains the ID of
the group, a list of rounds that the group requests were sent on, and the
status of the send operation.

Example GroupReport JSON:
		{
			"Id": "AAAAAAAAAM0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE",
			"Rounds": [25, 64],
			"RoundURL": "https://dashboard.xx.network/rounds/25?xxmessenger=true",
			"Status": 1
		}
 */
@interface BindingsGroupReport : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSData* _Nullable id_;
// skipped field GroupReport.RoundsList with unsupported type: gitlab.com/elixxir/client/v4/bindings.RoundsList

@property (nonatomic) NSString* _Nonnull roundURL;
@property (nonatomic) long status;
- (NSData* _Nullable)marshal:(NSError* _Nullable* _Nullable)error;
@end

/**
 * GroupSendReport is returned when sending a group message. It contains the
round ID sent on and the timestamp of the send operation.

Example GroupSendReport JSON:
     {
 	"Rounds": [25,	64],
 	"RoundURL": "https://dashboard.xx.network/rounds/25?xxmessenger=true",
 	"Timestamp": 1662577352813112000,
 	"MessageID": "69ug6FA50UT2q6MWH3hne9PkHQ+H9DnEDsBhc0m0Aww="
	    }
 */
@interface BindingsGroupSendReport : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped field GroupSendReport.RoundsList with unsupported type: gitlab.com/elixxir/client/v4/bindings.RoundsList

@property (nonatomic) NSString* _Nonnull roundURL;
@property (nonatomic) int64_t timestamp;
@property (nonatomic) NSData* _Nullable messageID;
- (NSData* _Nullable)marshal:(NSError* _Nullable* _Nullable)error;
@end

/**
 * IsReadyInfo contains information on if the network is ready and how close it
is to being ready.

Example JSON:

	{
	  "IsReady": true,
	  "HowClose": 0.534
	}
 */
@interface BindingsIsReadyInfo : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) BOOL isReady;
@property (nonatomic) double howClose;
@end

/**
 * Message is the bindings' representation of a receive.Message.

JSON example:
 {
  "MessageType":1,
  "ID":"EB/70R5HYEw5htZ4Hg9ondrn3+cAc/lH2G0mjQMja3w=",
  "Payload":"7TzZKgNphT5UooNM7mDSwtVcIs8AIu4vMKm4ld6GSR8YX5GrHirixUBAejmsgdroRJyo06TkIVef7UM9FN8YfQ==",
  "Sender":"emV6aW1hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD",
  "RecipientID":"amFrZXh4MzYwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD",
  "EphemeralID":17,"Timestamp":1653580439357351000,
  "Encrypted":false,
  "RoundId":19
 }
 */
@interface BindingsMessage : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) long messageType;
@property (nonatomic) NSData* _Nullable id_;
@property (nonatomic) NSData* _Nullable payload;
@property (nonatomic) NSData* _Nullable sender;
@property (nonatomic) NSData* _Nullable recipientID;
@property (nonatomic) int64_t ephemeralID;
@property (nonatomic) int64_t timestamp;
@property (nonatomic) BOOL encrypted;
@property (nonatomic) long roundId;
@property (nonatomic) NSString* _Nonnull roundURL;
@end

/**
 * NodeRegistrationReport is the report structure which
Cmix.GetNodeRegistrationStatus returns JSON marshalled.
 */
@interface BindingsNodeRegistrationReport : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) long numberOfNodesRegistered;
@property (nonatomic) long numberOfNodes;
@end

/**
 * NotificationReport is the bindings' representation for notifications for
this user.

Example NotificationReport JSON:

	{
	  "ForMe": true,
	  "Type": "e2e",
	  "Source": "dGVzdGVyMTIzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
	}

Given the Type, the Source value will have specific contextual meanings.
Below is a table that will define the contextual meaning of the Source field
given all possible Type fields.

	 TYPE     |     SOURCE         |    DESCRIPTION
	----------+--------------------+--------------------------------------------------------
	"default" |  recipient user ID |  A message with no association.
	"request" |  sender user ID    |  A channel request has been received, from Source.
	"reset"   |  sender user ID    |  A channel reset has been received.
	"confirm" |  sender user ID    |  A channel request has been accepted.
	"silent"  |  sender user ID    |  A message where the user should not be notified.
	"e2e"     |  sender user ID    |  A reception of an E2E message.
	"group"   |  group ID          |  A reception of a group chat message.
	"endFT"   |  sender user ID    |  The last message sent confirming end of file transfer.
	"groupRQ" |  sender user ID    |  A request from Source to join a group chat.
 */
@interface BindingsNotificationReport : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * ForMe determines whether this value is for the user. If it is
false, this report may be ignored.
 */
@property (nonatomic) BOOL forMe;
/**
 * Type is the type of notification. The list can be seen
 */
@property (nonatomic) NSString* _Nonnull type;
/**
 * Source is the source of the notification.
 */
@property (nonatomic) NSData* _Nullable source;
@end

/**
 * Progress contains the progress information of a transfer. It is returned by
[FileTransferSentProgressCallback.Callback] and
[FileTransferReceiveProgressCallback.Callback].

Example JSON:
 {
   "TransferID": "RyJcMqtI3IIM1+YMxRwCcFiOX6AGuIzS+vQaPnqXVT8=",
   "Completed": false,
   "Transmitted": 128,
   "Total": 2048
 }
 */
@interface BindingsProgress : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped field Progress.TransferID with unsupported type: *gitlab.com/elixxir/crypto/fileTransfer.TransferID

@property (nonatomic) BOOL completed;
@property (nonatomic) long transmitted;
@property (nonatomic) long total;
@end

/**
 * ReceivedChannelMessageReport is a report structure returned via the
ChannelMessageReceptionCallback. This report gives the context for the
channel the message was sent to and the message itself. This is returned via
the callback as JSON marshalled bytes.

JSON Example:
 {
   "ChannelId": "AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
   "MessageId": "3S6DiVjWH9mLmjy1oaam/3x45bJQzOW6u2KgeUn59wA=",
   "ReplyTo":"cxMyGUFJ+Ff1Xp2X+XkIpOnNAQEZmv8SNP5eYH4tCik=",
   "MessageType": 42,
   "SenderUsername": "hunter2",
   "Content": "YmFuX2JhZFVTZXI=",
   "Timestamp": 1662502150335283000,
   "Lease": 25,
   "Rounds": [ 1, 4, 9],
 }
 */
@interface BindingsReceivedChannelMessageReport : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSData* _Nullable channelId;
@property (nonatomic) NSData* _Nullable messageId;
@property (nonatomic) long messageType;
@property (nonatomic) NSString* _Nonnull nickname;
@property (nonatomic) NSData* _Nullable pubKey;
@property (nonatomic) long codeset;
@property (nonatomic) NSData* _Nullable content;
@property (nonatomic) int64_t timestamp;
@property (nonatomic) int64_t lease;
// skipped field ReceivedChannelMessageReport.RoundsList with unsupported type: gitlab.com/elixxir/client/v4/bindings.RoundsList

- (NSData* _Nullable)marshal:(NSError* _Nullable* _Nullable)error;
@end

/**
 * ReceivedFile contains the metadata of a new received file transfer. It is
received from a sender on a new file transfer. It is returned by
[ReceiveFileCallback.Callback].

Example JSON:
 {
   "TransferID": "0U+QY1nMOUzQGxGpqZyxDw8Cd6+qm8t870CzLtVoUM8=",
   "SenderID": "UL3+S8XdJHAfUtCUm7iZMxW8orR8Nd5JM9Ky7/5jds8D",
   "Preview": "aXQNcyBtZSBhIHByZXZpZXc=",
   "Name": "testfile.txt",
   "Type": "text file",
   "Size": 2048
 }
 */
@interface BindingsReceivedFile : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped field ReceivedFile.TransferID with unsupported type: *gitlab.com/elixxir/crypto/fileTransfer.TransferID

// skipped field ReceivedFile.SenderID with unsupported type: *gitlab.com/xx_network/primitives/id.ID

@property (nonatomic) NSData* _Nullable preview;
@property (nonatomic) NSString* _Nonnull name;
@property (nonatomic) NSString* _Nonnull type;
@property (nonatomic) long size;
@end

/**
 * ReceptionIdentity struct.

JSON example:
 {
  "ID":"emV6aW1hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD",
  "RSAPrivatePem":"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBNU15dTdhYjBJOS9UL1BFUUxtd2x3ejZHV3FjMUNYemVIVXhoVEc4bmg1WWRWSXMxCmJ2THpBVjNOMDJxdXN6K2s4TVFEWjBtejMzdkswUmhPczZIY0NUSFdzTEpXRkE5WWpzWWlCRi9qTDd1bmd1ckIKL2tvK1JJSnNrWGFWaEZaazRGdERoRXhTNWY4RnR0Qmk1NmNLZmdJQlVKT3ozZi9qQllTMkxzMlJ6cWV5YXM3SApjV2RaME9TclBTT3BiYlViU1FPbS9LWnlweGZHU21yZ2oxRUZuU1dZZ2xGZTdUOTRPbHF5MG14QTV5clVXbHorCk9sK3hHbXpCNUp4WUFSMU9oMFQrQTk4RWMrTUZHNm43L1MraDdzRDgybGRnVnJmbStFTzRCdmFKeTRESGZGMWgKNnp6QnVnY25NUVFGc0dLeDFYWC9COTVMdUpPVjdyeXlDbzZGbHdJREFRQUJBb0lCQVFDaUh6OGNlcDZvQk9RTAphUzBVRitHeU5VMnlVcVRNTWtTWThoUkh1c09CMmFheXoybHZVb3RLUHBPbjZRSWRWVTJrcE4vY2dtY0lSb2x5CkhBMDRUOHJBWVNaRlVqaVlRajkzKzRFREpJYXd2Z0YyVEs1bFoyb3oxVTdreStncU82V0RMR2Z0Q0wvODVQWEIKa210aXhnUXpRV3g1RWcvemtHdm03eURBalQxeDloNytsRjJwNFlBam5kT2xTS0dmQjFZeTR1RXBQd0kwc1lWdgpKQWc0MEFxbllZUmt4emJPbmQxWGNjdEJFN2Z1VDdrWXhoeSs3WXYrUTJwVy9BYmh6NGlHOEY1MW9GMGZwV0czCmlISDhsVXZFTkp2SUZEVHZ0UEpESlFZalBRN3lUbGlGZUdrMXZUQkcyQkpQNExzVzhpbDZOeUFuRktaY1hOQ24KeHVCendiSlJBb0dCQVBUK0dGTVJGRHRHZVl6NmwzZmg3UjJ0MlhrMysvUmpvR3BDUWREWDhYNERqR1pVd1RGVQpOS2tQTTNjS29ia2RBYlBDb3FpL0tOOVBibk9QVlZ3R3JkSE9vSnNibFVHYmJGamFTUzJQMFZnNUVhTC9rT2dUCmxMMUdoVFpIUWk1VUlMM0p4M1Z3T0ZRQ3RQOU1UQlQ0UEQvcEFLbDg3VTJXN3JTY1dGV1ZGbFNkQW9HQkFPOFUKVmhHWkRpVGFKTWVtSGZIdVYrNmtzaUlsam9aUVVzeGpmTGNMZ2NjV2RmTHBqS0ZWTzJNN3NqcEJEZ0w4NmFnegorVk14ZkQzZ1l0SmNWN01aMVcwNlZ6TlNVTHh3a1dRY1hXUWdDaXc5elpyYlhCUmZRNUVjMFBlblVoWWVwVzF5CkpkTC8rSlpQeDJxSzVrQytiWU5EdmxlNWdpcjlDSGVzTlR5enVyckRBb0dCQUl0cTJnN1RaazhCSVFUUVNrZ24Kb3BkRUtzRW4wZExXcXlBdENtVTlyaWpHL2l2eHlXczMveXZDQWNpWm5VVEp0QUZISHVlbXVTeXplQ2g5QmRkegoyWkRPNUdqQVBxVHlQS3NudFlNZkY4UDczZ1NES1VSWWVFbHFDejdET0c5QzRzcitPK3FoN1B3cCtqUmFoK1ZiCkNuWllNMDlBVDQ3YStJYUJmbWRkaXpLbEFvR0JBSmo1dkRDNmJIQnNISWlhNUNJL1RZaG5YWXUzMkVCYytQM0sKMHF3VThzOCtzZTNpUHBla2Y4RjVHd3RuUU4zc2tsMk1GQWFGYldmeVFZazBpUEVTb0p1cGJzNXA1enNNRkJ1bwpncUZrVnQ0RUZhRDJweTVwM2tQbDJsZjhlZXVwWkZScGE0WmRQdVIrMjZ4eWYrNEJhdlZJeld3NFNPL1V4Q3crCnhqbTNEczRkQW9HQWREL0VOa1BjU004c1BCM3JSWW9MQ2twcUV2U0MzbVZSbjNJd3c1WFAwcDRRVndhRmR1ckMKYUhtSE1EekNrNEUvb0haQVhFdGZ2S2tRaUI4MXVYM2c1aVo4amdYUVhXUHRteTVIcVVhcWJYUTlENkxWc3B0egpKL3R4SWJLMXp5c1o2bk9IY1VoUUwyVVF6SlBBRThZNDdjYzVzTThEN3kwZjJ0QURTQUZNMmN3PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==",
  "Salt":"4kk02v0NIcGtlobZ/xkxqWz8uH/ams/gjvQm14QT0dI=",
  "DHKeyPrivate":"eyJWYWx1ZSI6NDU2MDgzOTEzMjA0OTIyODA5Njg2MDI3MzQ0MzM3OTA0MzAyODYwMjM2NDk2NDM5NDI4NTcxMTMwNDMzOTQwMzgyMTIyMjY4OTQzNTMyMjIyMzc1MTkzNTEzMjU4MjA4MDA0NTczMDY4MjEwNzg2NDI5NjA1MjA0OTA3MjI2ODI5OTc3NTczMDkxODY0NTY3NDExMDExNjQxNCwiRmluZ2VycHJpbnQiOjE2ODAxNTQxNTExMjMzMDk4MzYzfQ=="
  "E2eGrp": "eyJnZW4iOiIyIiwicHJpbWUiOiJlMmVlOTgzZDAzMWRjMWRiNmYxYTdhNjdkZjBlOWE4ZTU1NjFkYjhlOGQ0OTQxMzM5NGMwNDliN2E4YWNjZWRjMjk4NzA4ZjEyMTk1MWQ5Y2Y5MjBlYzVkMTQ2NzI3YWE0YWU1MzViMDkyMmM2ODhiNTViM2RkMmFlZGY2YzAxYzk0NzY0ZGFiOTM3OTM1YWE4M2JlMzZlNjc3NjA3MTNhYjQ0YTYzMzdjMjBlNzg2MTU3NWU3NDVkMzFmOGI5ZTlhZDg0MTIxMThjNjJhM2UyZTI5ZGY0NmIwODY0ZDBjOTUxYzM5NGE1Y2JiZGM2YWRjNzE4ZGQyYTNlMDQxMDIzZGJiNWFiMjNlYmI0NzQyZGU5YzE2ODdiNWIzNGZhNDhjMzUyMTYzMmM0YTUzMGU4ZmZiMWJjNTFkYWRkZjQ1M2IwYjI3MTdjMmJjNjY2OWVkNzZiNGJkZDVjOWZmNTU4ZTg4ZjI2ZTU3ODUzMDJiZWRiY2EyM2VhYzVhY2U5MjA5NmVlOGE2MDY0MmZiNjFlOGYzZDI0OTkwYjhjYjEyZWU0NDhlZWY3OGUxODRjNzI0MmRkMTYxYzc3MzhmMzJiZjI5YTg0MTY5ODk3ODgyNWI0MTExYjRiYzNlMWUxOTg0NTUwOTU5NTgzMzNkNzc2ZDhiMmJlZWVkM2ExYTFhMjIxYTZlMzdlNjY0YTY0YjgzOTgxYzQ2ZmZkZGMxYTQ1ZTNkNTIxMWFhZjhiZmJjMDcyNzY4YzRmNTBkN2Q3ODAzZDJkNGYyNzhkZTgwMTRhNDczMjM2MzFkN2UwNjRkZTgxYzBjNmJmYTQzZWYwZTY5OTg4NjBmMTM5MGI1ZDNmZWFjYWYxNjk2MDE1Y2I3OWMzZjljMmQ5M2Q5NjExMjBjZDBlNWYxMmNiYjY4N2VhYjA0NTI0MWY5Njc4OWMzOGU4OWQ3OTYxMzhlNjMxOWJlNjJlMzVkODdiMTA0OGNhMjhiZTM4OWI1NzVlOTk0ZGNhNzU1NDcxNTg0YTA5ZWM3MjM3NDJkYzM1ODczODQ3YWVmNDlmNjZlNDM4NzMifQ=="
}
 */
@interface BindingsReceptionIdentity : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSData* _Nullable id_;
@property (nonatomic) NSData* _Nullable rsaPrivatePem;
@property (nonatomic) NSData* _Nullable salt;
@property (nonatomic) NSData* _Nullable dhKeyPrivate;
@property (nonatomic) NSData* _Nullable e2eGrp;
@end

/**
 * RestlikeMessage is the bindings' representation of a restlike.Message

JSON example:
 {
  "Version":1,
  "Headers":"Y29udGVudHM6YXBwbGljYXRpb24vanNvbg==",
  "Content":"VGhpcyBpcyBhIHJlc3RsaWtlIG1lc3NhZ2U=",
  "Method":2,
  "URI":"xx://CmixRestlike/rest",
  "Error":""
 }
 */
@interface BindingsRestlikeMessage : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped field RestlikeMessage.Version with unsupported type: uint32

@property (nonatomic) NSData* _Nullable headers;
@property (nonatomic) NSData* _Nullable content;
@property (nonatomic) long method;
@property (nonatomic) NSString* _Nonnull uri;
@property (nonatomic) NSString* _Nonnull error;
@end

/**
 * RoundsList contains a list of round IDs.

JSON Example:
 [1001,1003,1006]
 */
@interface BindingsRoundsList : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped field RoundsList.Rounds with unsupported type: []uint64

/**
 * Marshal JSON marshals the RoundsList.
 */
- (NSData* _Nullable)marshal:(NSError* _Nullable* _Nullable)error;
@end

/**
 * ShareURL is returned from ChannelsManager.GetShareURL. It includes the
channel's share URL and password, if it needs one.

JSON example for a public channel:
 {
   "url": "https://internet.speakeasy.tech/?0Name=name&1Description=desc&2Level=Public&3Created=1665489600000000000&e=%2FWNZvuHPuv%2Bx23XbZXVNzCi7y8rUSxkh75MpR9UrsCo%3D&k=ddX1CH52xH%2F%2Fb6lKrbvDghdSmCQr90ktsOAZ%2FrhEonI%3D&l=2&m=0&p=328&s=%2FD%2FoQP2mio3XAWfhmWF0xmZrpj4nAsb9JLXj%2B0Mzq9Y%3D&v=1",
   "password": ""
 }

JSON example for a private channel:
 {
   "url": "https://internet.speakeasy.tech/?0Name=name&1Description=desc&3Created=1665489600000000000&d=5AZQirb%2FYrmUITLn%2FFzCaGek1APfJnd2q0KwORGj%2BnbGg26kTShG6cfD3w6c%2BA3RDzxuKDSDN0zS4n1LbjiGe0KYdb8eJVeyRZtld516hfojNDXNAwZq8zbeZy4jjbF627fcLHRNS%2FaII4uJ5UB3gLUeBeZGraaybCCu3FIj1N4RbcJ5cQgT7hBf93bHmJc%3D&m=0&v=1",
   "password": "tribune gangrene labrador italics nutmeg process exhume legal"
 }

JSON example for a secret channel:
 {
   "url": "https://internet.speakeasy.tech/?d=w5evLthm%2Fq2j11g6PPtV0QoLaAqNCIER0OqxhxL%2FhpGVJI0057ZPgGBrKoJNE1%2FdoVuU35%2FhohuW%2BWvGlx6IuHoN6mDj0HfNj6Lo%2B8GwIaD6jOEwUcH%2FMKGsKnoqFsMaMPd5gXYgdHvA8l5SRe0gSCVqGKUaG6JgL%2FDu4iyjY7v4ykwZdQ7soWOcBLHDixGEkVLpwsCrPVHkT2K0W6gV74GIrQ%3D%3D&m=0&v=1",
   "password": "frenzy contort staple thicket consuming affiliate scion demeanor"
 }
 */
@interface BindingsShareURL : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull url;
@property (nonatomic) NSString* _Nonnull password;
@end

/**
 * SingleUseCallbackReport is the bindings-layer struct used to represent
single -use messages received by a callback passed into single.Listen.

SingleUseCallbackReport JSON example:
   {
     "Rounds":[1,5,9],
     "RoundURL": "https://dashboard.xx.network/rounds/25?xxmessenger=true",
     "Payload":"rSuPD35ELWwm5KTR9ViKIz/r1YGRgXIl5792SF8o8piZzN6sT4Liq4rUU/nfOPvQEjbfWNh/NYxdJ72VctDnWw==",
     "Partner":"emV6aW1hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD",
     "EphID":1655533,
     "ReceptionID":"emV6aW1hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD"}
   }
 */
@interface BindingsSingleUseCallbackReport : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped field SingleUseCallbackReport.RoundsList with unsupported type: gitlab.com/elixxir/client/v4/bindings.RoundsList

@property (nonatomic) NSString* _Nonnull roundURL;
@property (nonatomic) NSData* _Nullable payload;
// skipped field SingleUseCallbackReport.Partner with unsupported type: *gitlab.com/xx_network/primitives/id.ID

@property (nonatomic) int64_t ephID;
// skipped field SingleUseCallbackReport.ReceptionID with unsupported type: *gitlab.com/xx_network/primitives/id.ID

- (NSData* _Nullable)marshal:(NSError* _Nullable* _Nullable)error;
@end

/**
 * SingleUseResponseReport is the bindings-layer struct used to represent
information passed to the single.Response callback interface in response to
single.TransmitRequest.

SingleUseResponseReport JSON example:
 {
  "Rounds":[1,5,9],
  "RoundURL": "https://dashboard.xx.network/rounds/25?xxmessenger=true",
  "Payload":"rSuPD35ELWwm5KTR9ViKIz/r1YGRgXIl5792SF8o8piZzN6sT4Liq4rUU/nfOPvQEjbfWNh/NYxdJ72VctDnWw==",
  "EphID":1655533,
  "ReceptionID":"emV6aW1hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD"},
  "Err":"",
 }
 */
@interface BindingsSingleUseResponseReport : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped field SingleUseResponseReport.RoundsList with unsupported type: gitlab.com/elixxir/client/v4/bindings.RoundsList

@property (nonatomic) NSString* _Nonnull roundURL;
@property (nonatomic) NSData* _Nullable payload;
// skipped field SingleUseResponseReport.ReceptionID with unsupported type: *gitlab.com/xx_network/primitives/id.ID

@property (nonatomic) int64_t ephID;
@property (nonatomic) NSError* _Nullable err;
- (NSData* _Nullable)marshal:(NSError* _Nullable* _Nullable)error;
@end

/**
 * SingleUseSendReport is the bindings-layer struct used to represent
information returned by single.TransmitRequest.

SingleUseSendReport JSON example:
 {
  "Rounds":[1,5,9],
  "RoundURL": "https://dashboard.xx.network/rounds/25?xxmessenger=true",
  "EphID":1655533,
  "ReceptionID":"emV6aW1hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD"}
 }
 */
@interface BindingsSingleUseSendReport : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped field SingleUseSendReport.RoundsList with unsupported type: gitlab.com/elixxir/client/v4/bindings.RoundsList

@property (nonatomic) NSString* _Nonnull roundURL;
// skipped field SingleUseSendReport.ReceptionID with unsupported type: *gitlab.com/xx_network/primitives/id.ID

@property (nonatomic) int64_t ephID;
- (NSData* _Nullable)marshal:(NSError* _Nullable* _Nullable)error;
@end

/**
 * UserDiscovery is a bindings-layer struct that wraps an ud.Manager interface.
 */
@interface BindingsUserDiscovery : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * ConfirmFact confirms a fact first registered via SendRegisterFact. The
confirmation ID comes from SendRegisterFact while the code will come over the
associated communications system.
 */
- (BOOL)confirmFact:(NSString* _Nullable)confirmationID code:(NSString* _Nullable)code error:(NSError* _Nullable* _Nullable)error;
/**
 * GetContact returns the marshalled bytes of the contact.Contact for UD as
retrieved from the NDF.
 */
- (NSData* _Nullable)getContact:(NSError* _Nullable* _Nullable)error;
/**
 * GetFacts returns a JSON marshalled list of [fact.Fact] objects that exist
within the Store's registeredFacts map.
 */
- (NSData* _Nullable)getFacts;
/**
 * GetID returns the udTracker ID for the UserDiscovery object.
 */
- (long)getID;
/**
 * PermanentDeleteAccount removes the username associated with this user from
the UD service. This will only take a username type fact, and the fact must
be associated with this user.

Parameters:
 - factJson - a JSON marshalled [fact.Fact]
 */
- (BOOL)permanentDeleteAccount:(NSData* _Nullable)factJson error:(NSError* _Nullable* _Nullable)error;
/**
 * RemoveFact removes a previously confirmed fact. This will fail if the fact
passed in is not UD service does not associate this fact with this user.

Parameters:
 - factJson - a JSON marshalled [fact.Fact]
 */
- (BOOL)removeFact:(NSData* _Nullable)factJson error:(NSError* _Nullable* _Nullable)error;
/**
 * SendRegisterFact adds a fact for the user to user discovery. Will only
succeed if the user is already registered and the system does not have the
fact currently registered for any user.

This does not complete the fact registration process, it returns a
confirmation ID instead. Over the communications system the fact is
associated with, a code will be sent. This confirmation ID needs to be called
along with the code to finalize the fact.

Parameters:
 - factJson - a JSON marshalled [fact.Fact]
 */
- (NSString* _Nonnull)sendRegisterFact:(NSData* _Nullable)factJson error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * Error codes
 */
FOUNDATION_EXPORT NSString* _Nonnull const BindingsUnrecognizedCode;
/**
 * Error codes
 */
FOUNDATION_EXPORT NSString* _Nonnull const BindingsUnrecognizedMessage;

/**
 * AsyncRequestRestLike sends an asynchronous restlike request to a given
contact.

Parameters:
 - e2eID - ID of the e2e object in the tracker
 - recipient - marshalled contact.Contact object
 - request - JSON marshalled RestlikeMessage
 - paramsJSON - JSON marshalled single.RequestParams
 - cb - RestlikeCallback callback

Returns an error, and the RestlikeCallback will be called with the results
of JSON marshalling the response when received.
 */
FOUNDATION_EXPORT BOOL BindingsAsyncRequestRestLike(long e2eID, NSData* _Nullable recipient, NSData* _Nullable request, NSData* _Nullable paramsJSON, id<BindingsRestlikeCallback> _Nullable cb, NSError* _Nullable* _Nullable error);

/**
 * ConstructIdentity constructs a [channel.Identity] from a user's public key
and codeset version.

Parameters:
 - pubKey - The Ed25519 public key.
 - codesetVersion - The version of the codeset used to generate the identity.

Returns:
 - JSON of [channel.Identity].
 */
FOUNDATION_EXPORT NSData* _Nullable BindingsConstructIdentity(NSData* _Nullable pubKey, long codesetVersion, NSError* _Nullable* _Nullable error);

/**
 * CreateUserFriendlyErrorMessage will convert the passed in error string to an
error string that is user-friendly if a substring match is found to a
common error. Common errors is a map that can be updated using
UpdateCommonErrors. If the error is not common, some simple parsing is done
on the error message to make it more user-accessible, removing backend
specific jargon.

Parameters:
  - errStr - an error returned from the backend.

Returns
 - A user-friendly error message. This should be devoid of technical speak
   but still be meaningful for front-end or back-end teams.
 */
FOUNDATION_EXPORT NSString* _Nonnull BindingsCreateUserFriendlyErrorMessage(NSString* _Nullable errStr);

/**
 * DecodePrivateURL decodes the channel URL, using the password, into a channel
pretty print. This function can only be used for private or secret channel
URLs. To get the privacy level of a channel URL, use [GetShareUrlType].

Parameters:
 - url - The channel's share URL. Should be received from another user or
   generated via [GetShareURL].
 - password - The password needed to decrypt the secret data in the URL.

Returns:
 - The channel pretty print.
 */
FOUNDATION_EXPORT NSString* _Nonnull BindingsDecodePrivateURL(NSString* _Nullable url, NSString* _Nullable password, NSError* _Nullable* _Nullable error);

/**
 * DecodePublicURL decodes the channel URL into a channel pretty print. This
function can only be used for public channel URLs. To get the privacy level
of a channel URL, use [GetShareUrlType].

Parameters:
 - url - The channel's share URL. Should be received from another user or
   generated via [GetShareURL].

Returns:
 - The channel pretty print.
 */
FOUNDATION_EXPORT NSString* _Nonnull BindingsDecodePublicURL(NSString* _Nullable url, NSError* _Nullable* _Nullable error);

/**
 * DeserializeGroup converts the results of Group.Serialize into a Group
so that its methods can be called.
 */
FOUNDATION_EXPORT BindingsGroup* _Nullable BindingsDeserializeGroup(NSData* _Nullable serializedGroupData, NSError* _Nullable* _Nullable error);

/**
 * DownloadAndVerifySignedNdfWithUrl retrieves the NDF from a specified URL.
The NDF is processed into a protobuf containing a signature that is verified
using the cert string passed in. The NDF is returned as marshaled byte data
that may be used to start a client.
 */
FOUNDATION_EXPORT NSData* _Nullable BindingsDownloadAndVerifySignedNdfWithUrl(NSString* _Nullable url, NSString* _Nullable cert, NSError* _Nullable* _Nullable error);

/**
 * EnableGrpcLogs sets GRPC trace logging.
 */
FOUNDATION_EXPORT void BindingsEnableGrpcLogs(id<BindingsLogWriter> _Nullable writer);

/**
 * GenerateChannel is used to create a channel a new channel of which you are
the admin. It is only for making new channels, not joining existing ones.

It returns a pretty print of the channel and the private key.

Parameters:
 - cmixID - The tracked cmix object ID. This can be retrieved using
   [Cmix.GetID].
 - name - The name of the new channel. The name must be between 3 and 24
   characters inclusive. It can only include upper and lowercase unicode
   letters, digits 0 through 9, and underscores (_). It cannot be changed
   once a channel is created.
 - description - The description of a channel. The description is optional
   but cannot be longer than 144 characters and can include all unicode
   characters. It cannot be changed once a channel is created.
 - privacyLevel - The broadcast.PrivacyLevel of the channel. 0 = public,
   1 = private, and 2 = secret. Refer to the comment below for more
   information.

Returns:
 - []byte - [ChannelGeneration] describes a generated channel. It contains
   both the public channel info and the private key for the channel in PEM
   format.

The [broadcast.PrivacyLevel] of a channel indicates the level of channel
information revealed when sharing it via URL. For any channel besides public
channels, the secret information is encrypted and a password is required to
share and join a channel.
 - A privacy level of [broadcast.Public] reveals all the information
   including the name, description, privacy level, public key and salt.
 - A privacy level of [broadcast.Private] reveals only the name and
   description.
 - A privacy level of [broadcast.Secret] reveals nothing.
 */
FOUNDATION_EXPORT NSData* _Nullable BindingsGenerateChannel(long cmixID, NSString* _Nullable name, NSString* _Nullable description, long privacyLevel, NSError* _Nullable* _Nullable error);

/**
 * GenerateChannelIdentity creates a new private channel identity
([channel.PrivateIdentity]). The public component can be retrieved as JSON
via [GetPublicChannelIdentityFromPrivate].

Parameters:
 - cmixID - The tracked cmix object ID. This can be retrieved using
   [Cmix.GetID].

Returns:
 - Marshalled bytes of [channel.PrivateIdentity].
 */
FOUNDATION_EXPORT NSData* _Nullable BindingsGenerateChannelIdentity(long cmixID, NSError* _Nullable* _Nullable error);

/**
 * GenerateSecret creates a secret password using a system-based pseudorandom
number generator.

Parameters:
 - numBytes - The size of secret. It should be set to 32, but can be set
  higher in certain cases.
 */
FOUNDATION_EXPORT NSData* _Nullable BindingsGenerateSecret(long numBytes);

/**
 * GetChannelDbCipherTrackerFromID returns the ChannelDbCipher with the
corresponding ID in the tracker.
 */
FOUNDATION_EXPORT BindingsChannelDbCipher* _Nullable BindingsGetChannelDbCipherTrackerFromID(long id_, NSError* _Nullable* _Nullable error);

/**
 * GetChannelInfo returns the info about a channel from its public description.

Parameters:
 - prettyPrint - The pretty print of the channel.

The pretty print will be of the format:
 <Speakeasy-v3:Test_Channel|description:Channel description.|level:Public|created:1666718081766741100|secrets:+oHcqDbJPZaT3xD5NcdLY8OjOMtSQNKdKgLPmr7ugdU=|rCI0wr01dHFStjSFMvsBzFZClvDIrHLL5xbCOPaUOJ0=|493|1|7cBhJxVfQxWo+DypOISRpeWdQBhuQpAZtUbQHjBm8NQ=>

Returns:
 - []byte - JSON of [ChannelInfo], which describes all relevant channel info.
 */
FOUNDATION_EXPORT NSData* _Nullable BindingsGetChannelInfo(NSString* _Nullable prettyPrint, NSError* _Nullable* _Nullable error);

/**
 * GetChannelJSON returns the JSON of the channel for the given pretty print.

Parameters:
 - prettyPrint - The pretty print of the channel.

Returns:
 - JSON of the [broadcast.Channel] object.

Example JSON of [broadcast.Channel]:
 {
   "ReceptionID": "Ja/+Jh+1IXZYUOn+IzE3Fw/VqHOscomD0Q35p4Ai//kD",
   "Name": "My_Channel",
   "Description": "Here is information about my channel.",
   "Salt": "+tlrU/htO6rrV3UFDfpQALUiuelFZ+Cw9eZCwqRHk+g=",
   "RsaPubKeyHash": "PViT1mYkGBj6AYmE803O2RpA7BX24EjgBdldu3pIm4o=",
   "RsaPubKeyLength": 5,
   "RSASubPayloads": 1,
   "Secret": "JxZt/wPx2luoPdHY6jwbXqNlKnixVU/oa9DgypZOuyI=",
   "Level": 0
 }
 */
FOUNDATION_EXPORT NSData* _Nullable BindingsGetChannelJSON(NSString* _Nullable prettyPrint, NSError* _Nullable* _Nullable error);

/**
 * GetDefaultCMixParams returns a JSON serialized object with all of the cMix
parameters and their default values. Call this function and modify the JSON
to change cMix settings.
 */
FOUNDATION_EXPORT NSData* _Nullable BindingsGetDefaultCMixParams(void);

/**
 * GetDefaultE2EParams returns a JSON serialized object with all of the E2E
parameters and their default values. Call this function and modify the JSON
to change E2E settings.
 */
FOUNDATION_EXPORT NSData* _Nullable BindingsGetDefaultE2EParams(void);

/**
 * GetDefaultE2eFileTransferParams returns a JSON serialized object with all the
E2E file transfer parameters and their default values. Call this function and
modify the JSON to change single use settings.
 */
FOUNDATION_EXPORT NSData* _Nullable BindingsGetDefaultE2eFileTransferParams(void);

/**
 * GetDefaultFileTransferParams returns a JSON serialized object with all the
file transfer parameters and their default values. Call this function and
modify the JSON to change file transfer settings.
 */
FOUNDATION_EXPORT NSData* _Nullable BindingsGetDefaultFileTransferParams(void);

/**
 * GetDefaultSingleUseParams returns a JSON serialized object with all the
single-use parameters and their default values. Call this function and modify
the JSON to change single use settings.
 */
FOUNDATION_EXPORT NSData* _Nullable BindingsGetDefaultSingleUseParams(void);

/**
 * GetDependencies returns the xxdk.DEPENDENCIES.
 */
FOUNDATION_EXPORT NSString* _Nonnull BindingsGetDependencies(void);

/**
 * GetFactsFromContact returns the fact list in the [contact.Contact] object.

Parameters:
 - marshaledContact - the JSON marshalled bytes of [contact.Contact]

Returns:
 - []byte - the JSON marshalled bytes of [fact.FactList]
 */
FOUNDATION_EXPORT NSData* _Nullable BindingsGetFactsFromContact(NSData* _Nullable marshaledContact, NSError* _Nullable* _Nullable error);

/**
 * GetGitVersion returns the xxdk.GITVERSION.
 */
FOUNDATION_EXPORT NSString* _Nonnull BindingsGetGitVersion(void);

/**
 * GetIDFromContact returns the ID in the [contact.Contact] object.

Parameters:
 - marshaledContact - JSON marshalled bytes of [contact.Contact]

Returns:
 - []byte - bytes of the [id.ID] object
 */
FOUNDATION_EXPORT NSData* _Nullable BindingsGetIDFromContact(NSData* _Nullable marshaledContact, NSError* _Nullable* _Nullable error);

/**
 * GetNotificationsReport parses the received notification data to determine which
notifications are for this user. // This returns the JSON-marshalled
NotificationReports.

Parameters:
  - notificationCSV - the notification data received from the
    notifications' server.
  - marshalledServices - the JSON-marshalled list of services the backend
    keeps track of. Refer to Cmix.TrackServices or
    Cmix.TrackServicesWithIdentity for information about this.

Returns:
  - []byte - A JSON marshalled NotificationReports. Some NotificationReport's
    within in this structure may have their NotificationReport.ForMe
    set to false. These may be ignored.
 */
FOUNDATION_EXPORT NSData* _Nullable BindingsGetNotificationsReport(NSString* _Nullable notificationCSV, NSData* _Nullable marshalledServices, NSError* _Nullable* _Nullable error);

/**
 * GetPubkeyFromContact returns the DH public key in the [contact.Contact]
object.

Parameters:
 - marshaledContact - JSON marshalled bytes of [contact.Contact]

Returns:
 - []byte - JSON marshalled bytes of the [cyclic.Int] object
 */
FOUNDATION_EXPORT NSData* _Nullable BindingsGetPubkeyFromContact(NSData* _Nullable marshaledContact, NSError* _Nullable* _Nullable error);

/**
 * GetPublicChannelIdentity constructs a public identity ([channel.Identity])
from a bytes version and returns it JSON marshaled.

Parameters:
 - marshaledPublic - Bytes of the public identity ([channel.Identity]).

Returns:
 - JSON of the constructed [channel.Identity].
 */
FOUNDATION_EXPORT NSData* _Nullable BindingsGetPublicChannelIdentity(NSData* _Nullable marshaledPublic, NSError* _Nullable* _Nullable error);

/**
 * GetPublicChannelIdentityFromPrivate returns the public identity
([channel.Identity]) contained in the given private identity
([channel.PrivateIdentity]).

Parameters:
 - marshaledPrivate - Bytes of the private identity
   (channel.PrivateIdentity]).

Returns:
 - JSON of the public [channel.Identity].
 */
FOUNDATION_EXPORT NSData* _Nullable BindingsGetPublicChannelIdentityFromPrivate(NSData* _Nullable marshaledPrivate, NSError* _Nullable* _Nullable error);

/**
 * GetSavedChannelPrivateKeyUNSAFE loads the private key from storage for the
given channel ID.

NOTE: This function is unsafe and only for debugging purposes only.

Parameters:
 - cmixID - ID of [Cmix] object in tracker.
 - channelIdBase64 - The [id.ID] of the channel in base 64 encoding.

Returns:
 - The PEM file of the private key.
 */
FOUNDATION_EXPORT NSString* _Nonnull BindingsGetSavedChannelPrivateKeyUNSAFE(long cmixID, NSString* _Nullable channelIdBase64, NSError* _Nullable* _Nullable error);

/**
 * GetShareUrlType determines the [broadcast.PrivacyLevel] of the channel URL.
If the URL is an invalid channel URL, an error is returned.

Parameters:
 - url - The channel share URL.

Returns:
 - An int that corresponds to the [broadcast.PrivacyLevel] as outlined below.

Possible returns:
 0 = public channel
 1 = private channel
 2 = secret channel
 */
FOUNDATION_EXPORT BOOL BindingsGetShareUrlType(NSString* _Nullable url, long* _Nullable ret0_, NSError* _Nullable* _Nullable error);

/**
 * GetVersion returns the xxdk.SEMVER.
 */
FOUNDATION_EXPORT NSString* _Nonnull BindingsGetVersion(void);

/**
 * ImportPrivateIdentity generates a new [channel.PrivateIdentity] from exported
data.

Parameters:
 - password - The password used to encrypt the identity.
 - data - The encrypted data.

Returns:
 - JSON of [channel.PrivateIdentity].
 */
FOUNDATION_EXPORT NSData* _Nullable BindingsImportPrivateIdentity(NSString* _Nullable password, NSData* _Nullable data, NSError* _Nullable* _Nullable error);

/**
 * InitFileTransfer creates a bindings-level file transfer manager.

Parameters:
 - e2eID - ID of [E2e] object in tracker.
 - receiveFileCallback - A callback that is called when a new file transfer
   is received.
 - e2eFileTransferParamsJson - JSON of
   [gitlab.com/elixxir/client/v4/fileTransfer/e2e.Params].
 - fileTransferParamsJson - JSON of [fileTransfer.Params].

Returns:
 - New [FileTransfer] object.
 */
FOUNDATION_EXPORT BindingsFileTransfer* _Nullable BindingsInitFileTransfer(long e2eID, id<BindingsReceiveFileCallback> _Nullable receiveFileCallback, NSData* _Nullable e2eFileTransferParamsJson, NSData* _Nullable fileTransferParamsJson, NSError* _Nullable* _Nullable error);

/**
 * InitializeBackup creates a bindings-layer Backup object.

Parameters:
 - e2eID - ID of the E2e object in the e2e tracker.
 - udID - ID of the UserDiscovery object in the ud tracker.
 - backupPassPhrase - backup passphrase provided by the user. Used to decrypt
   backup.
 - cb - the callback to be called when a backup is triggered.
 */
FOUNDATION_EXPORT BindingsBackup* _Nullable BindingsInitializeBackup(long e2eID, long udID, NSString* _Nullable backupPassPhrase, id<BindingsUpdateBackupFunc> _Nullable cb, NSError* _Nullable* _Nullable error);

/**
 * IsNicknameValid checks if a nickname is valid.

Rules:
 1. A nickname must not be longer than 24 characters.
 2. A nickname must not be shorter than 1 character.
 */
FOUNDATION_EXPORT BOOL BindingsIsNicknameValid(NSString* _Nullable nick, NSError* _Nullable* _Nullable error);

/**
 * IsRegisteredWithUD is a function which checks the internal state
files to determine if a user has registered with UD in the past.

Parameters:
 - e2eID -  REQUIRED. The tracked e2e object ID. This can be retrieved using [E2e.GetID].

Returns:
  - bool - A boolean representing true if the user has been registered with UD already
           or false if it has not been registered already.
 - error - An error should only be returned if the internal tracker failed to retrieve an
           E2e object given the e2eId. If an error was returned, the registration state check
           was not performed properly, and the boolean returned should be ignored.
 */
FOUNDATION_EXPORT BOOL BindingsIsRegisteredWithUD(long e2eId, BOOL* _Nullable ret0_, NSError* _Nullable* _Nullable error);

/**
 * Listen starts a single-use listener on a given tag using the passed in E2e
object and SingleUseCallback func.

Parameters:
 - e2eID - ID of the e2e object in the tracker
 - tag - identifies the single-use message
 - cb - the callback that will be called when a response is received

Returns:
 - Stopper - an interface containing a function used to stop the listener
 */
FOUNDATION_EXPORT id<BindingsStopper> _Nullable BindingsListen(long e2eID, NSString* _Nullable tag, id<BindingsSingleUseCallback> _Nullable cb, NSError* _Nullable* _Nullable error);

/**
 * LoadChannelsManager loads an existing [ChannelsManager].

This is for loading a manager for an identity that has already been created.
The channel manager should have previously been created with
[NewChannelsManager] and the storage is retrievable with
[ChannelsManager.GetStorageTag].

Parameters:
 - cmixID - The tracked cmix object ID. This can be retrieved using
   [Cmix.GetID].
 - storageTag - The storage tag associated with the previously created
   channel manager and retrieved with [ChannelsManager.GetStorageTag].
 - event - An interface that contains a function that initialises and returns
   the event model that is bindings-compatible.
 */
FOUNDATION_EXPORT BindingsChannelsManager* _Nullable BindingsLoadChannelsManager(long cmixID, NSString* _Nullable storageTag, id<BindingsEventModelBuilder> _Nullable eventBuilder, NSError* _Nullable* _Nullable error);

// skipped function LoadChannelsManagerGoEventModel with unsupported parameter or return types


/**
 * LoadCmix will load an existing user storage from the storageDir using the
password. This will fail if the user storage does not exist or the password
is incorrect.

The password is passed as a byte array so that it can be cleared from memory
and stored as securely as possible using the MemGuard library.

LoadCmix does not block on network connection and instead loads and starts
subprocesses to perform network operations.
 */
FOUNDATION_EXPORT BindingsCmix* _Nullable BindingsLoadCmix(NSString* _Nullable storageDir, NSData* _Nullable password, NSData* _Nullable cmixParamsJSON, NSError* _Nullable* _Nullable error);

/**
 * LoadReceptionIdentity loads the given identity in Cmix storage with the given
key.
 */
FOUNDATION_EXPORT NSData* _Nullable BindingsLoadReceptionIdentity(NSString* _Nullable key, long cmixId, NSError* _Nullable* _Nullable error);

/**
 * LogLevel sets level of logging. All logs at the set level and below will be
displayed (e.g., when log level is ERROR, only ERROR, CRITICAL, and FATAL
messages will be printed).

Log level options:
	TRACE    - 0
	DEBUG    - 1
	INFO     - 2
	WARN     - 3
	ERROR    - 4
	CRITICAL - 5
	FATAL    - 6

The default log level without updates is INFO.
 */
FOUNDATION_EXPORT BOOL BindingsLogLevel(long level, NSError* _Nullable* _Nullable error);

/**
 * Login creates and returns a new E2e object and adds it to the
e2eTrackerSingleton. Identity should be created via
Cmix.MakeReceptionIdentity and passed in here. If callbacks is left nil, a
default auth.Callbacks will be used.
 */
FOUNDATION_EXPORT BindingsE2e* _Nullable BindingsLogin(long cmixId, id<BindingsAuthCallbacks> _Nullable callbacks, NSData* _Nullable identity, NSData* _Nullable e2eParamsJSON, NSError* _Nullable* _Nullable error);

/**
 * LoginEphemeral creates and returns a new ephemeral E2e object and adds it to
the e2eTrackerSingleton. Identity should be created via
Cmix.MakeReceptionIdentity or Cmix.MakeLegacyReceptionIdentity and passed in
here. If callbacks is left nil, a default auth.Callbacks will be used.
 */
FOUNDATION_EXPORT BindingsE2e* _Nullable BindingsLoginEphemeral(long cmixId, id<BindingsAuthCallbacks> _Nullable callbacks, NSData* _Nullable identity, NSData* _Nullable e2eParamsJSON, NSError* _Nullable* _Nullable error);

/**
 * LookupUD returns the public key of the passed ID as known by the user
discovery system or returns by the timeout.

Parameters:
 - e2eID - e2e object ID in the tracker
 - udContact - the marshalled bytes of the contact.Contact object
 - lookupId - the marshalled bytes of the id.ID object for the user that
   LookupUD will look up.
 - singleRequestParams - the JSON marshalled bytes of single.RequestParams

Returns:
 - []byte - the JSON marshalled bytes of the SingleUseSendReport object,
   which can be passed into Cmix.WaitForRoundResult to see if the send
   succeeded.
 */
FOUNDATION_EXPORT NSData* _Nullable BindingsLookupUD(long e2eID, NSData* _Nullable udContact, id<BindingsUdLookupCallback> _Nullable cb, NSData* _Nullable lookupId, NSData* _Nullable singleRequestParamsJSON, NSError* _Nullable* _Nullable error);

/**
 * MultiLookupUD returns the public key of all passed in IDs as known by the
user discovery system or returns by the timeout.

Parameters:
 - e2eID - e2e object ID in the tracker
 - udContact - the marshalled bytes of the contact.Contact object
 - lookupIds - JSON marshalled list of []*id.ID object for the users that
   MultiLookupUD will look up.
 - singleRequestParams - the JSON marshalled bytes of single.RequestParams

Returns:
 - []byte - the JSON marshalled bytes of the SingleUseSendReport object,
   which can be passed into Cmix.WaitForRoundResult to see if the send
   succeeded.
 */
FOUNDATION_EXPORT BOOL BindingsMultiLookupUD(long e2eID, NSData* _Nullable udContact, id<BindingsUdMultiLookupCallback> _Nullable cb, NSData* _Nullable lookupIds, NSData* _Nullable singleRequestParamsJSON, NSError* _Nullable* _Nullable error);

/**
 * NewChannelsDatabaseCipher constructs a ChannelDbCipher object.

Parameters:
 - cmixID - The tracked [Cmix] object ID.
 - password - The password for storage. This should be the same password
   passed into [NewCmix].
 - plaintTextBlockSize - The maximum size of a payload to be encrypted.
   A payload passed into [ChannelDbCipher.Encrypt] that is larger than
   plaintTextBlockSize will result in an error.
 */
FOUNDATION_EXPORT BindingsChannelDbCipher* _Nullable BindingsNewChannelsDatabaseCipher(long cmixID, NSData* _Nullable password, long plaintTextBlockSize, NSError* _Nullable* _Nullable error);

/**
 * NewChannelsManager creates a new [ChannelsManager] from a new private
identity ([channel.PrivateIdentity]).

This is for creating a manager for an identity for the first time. For
generating a new one channel identity, use [GenerateChannelIdentity]. To
reload this channel manager, use [LoadChannelsManager], passing in the
storage tag retrieved by [ChannelsManager.GetStorageTag].

Parameters:
 - cmixID - The tracked Cmix object ID. This can be retrieved using
   [Cmix.GetID].
 - privateIdentity - Bytes of a private identity ([channel.PrivateIdentity])
   that is generated by [GenerateChannelIdentity].
 - event -  An interface that contains a function that initialises and returns
   the event model that is bindings-compatible.
 */
FOUNDATION_EXPORT BindingsChannelsManager* _Nullable BindingsNewChannelsManager(long cmixID, NSData* _Nullable privateIdentity, id<BindingsEventModelBuilder> _Nullable eventBuilder, NSError* _Nullable* _Nullable error);

// skipped function NewChannelsManagerGoEventModel with unsupported parameter or return types


/**
 * NewCmix creates user storage, generates keys, connects, and registers with
the network. Note that this does not register a username/identity, but merely
creates a new cryptographic identity for adding such information at a later
date.

Users of this function should delete the storage directory on error.
 */
FOUNDATION_EXPORT BOOL BindingsNewCmix(NSString* _Nullable ndfJSON, NSString* _Nullable storageDir, NSData* _Nullable password, NSString* _Nullable registrationCode, NSError* _Nullable* _Nullable error);

/**
 * NewCmixFromBackup initializes a new e2e storage from an encrypted
backup. Users of this function should delete the storage directory on error.
Users of this function should call LoadCmix as normal once this call succeeds.

Parameters:
 - ndfJSON - JSON of the NDF.
 - storageDir - directory for the storage files.
 - sessionPassword - password to decrypt the data in the storageDir.
 - backupPassphrase - backup passphrase provided by the user. Used to decrypt backup.
 - backupFileContents - the file contents of the backup.

Returns:
 - []byte - the JSON marshalled bytes of the BackupReport object.
 */
FOUNDATION_EXPORT NSData* _Nullable BindingsNewCmixFromBackup(NSString* _Nullable ndfJSON, NSString* _Nullable storageDir, NSString* _Nullable backupPassphrase, NSData* _Nullable sessionPassword, NSData* _Nullable backupFileContents, NSError* _Nullable* _Nullable error);

/**
 * NewDummyTrafficManager creates a DummyTraffic manager and initialises the
dummy traffic sending thread. Note that the manager does not start sending
dummy traffic until true is passed into DummyTraffic.SetStatus. The time
duration between each sending operation and the amount of messages sent each
interval are randomly generated values with bounds defined by the given
parameters below.

Parameters:
 - cmixId - a Cmix object ID in the tracker.
 - maxNumMessages - the upper bound of the random number of messages sent
   each sending cycle.  Suggested value: 5.
 - avgSendDeltaMS - the average duration, in milliseconds, to wait between
   sends.  Suggested value: 60000.
 - randomRangeMS - the upper bound of the interval between sending cycles, in
   milliseconds. Sends occur every avgSendDeltaMS +/- a random duration with
   an upper bound of randomRangeMS.  Suggested value: 1000.
 */
FOUNDATION_EXPORT BindingsDummyTraffic* _Nullable BindingsNewDummyTrafficManager(long cmixId, long maxNumMessages, long avgSendDeltaMS, long randomRangeMS, NSError* _Nullable* _Nullable error);

// skipped function NewEventModel with unsupported parameter or return types


/**
 * NewGroupChat creates a bindings-layer group chat manager.

Parameters:
 - e2eID - e2e object ID in the tracker.
 - requestFunc - a callback to handle group chat requests.
 - processor - the group chat message processor.
 */
FOUNDATION_EXPORT BindingsGroupChat* _Nullable BindingsNewGroupChat(long e2eID, id<BindingsGroupRequest> _Nullable requestFunc, id<BindingsGroupChatProcessor> _Nullable processor, NSError* _Nullable* _Nullable error);

/**
 * NewOrLoadUd loads an existing UserDiscovery from storage or creates a new
UserDiscovery if there is no storage data. Regardless of storage state,
the UserDiscovery object returned will be registered with the
User Discovery service. If the user is not already registered, a call
to register will occur internally. If the user is already registered,
this call will simply load state and return to you a UserDiscovery object.
Some parameters are required for registering with the service, but are not required
if the user is already registered. These will be noted in the parameters section as
"SEMI-REQUIRED".

Certain parameters are required every call to this function. These parameters are listed below
as "REQUIRED". For example, parameters need be provided to specify how to connect to the
User Discovery service. These parameters specifically may be used to contact either the UD
server hosted by the xx network team or a custom third-party operated server. For the former,
all the information may be fetched from the NDF using the bindings. These fetch
methods are detailed in the parameters section.

Params
 - e2eID -  REQUIRED. The tracked e2e object ID. This is returned by [E2e.GetID].
 - follower - REQUIRED. Network follower function. This will check if the network
   follower is running.
 - username - SEMI-REQUIRED. The username the user wants to register with UD.
   If the user is already registered, this field may be blank. If the user is not
   already registered, these field must be populated with a username that meets the
   requirements of the UD service. For example, in the xx network's UD service,
   the username must not be registered by another user.
 - registrationValidationSignature - SEMI-REQUIRED. A signature provided by the xx network
   (i.e. the client registrar). If the user is not already registered, this field is required
   in order to register with the xx network. This may be nil if the user is already registered
   or connecting to a third-party UD service unassociated with the xx network.
 - cert - REQUIRED. The TLS certificate for the UD server this call will connect with.
   If this is nil, you may not contact the UD server hosted by the xx network.
   Third-party services may vary.
   You may use the UD server run by the xx network team by using [E2e.GetUdCertFromNdf].
 - contactFile - REQUIRED. The data within a marshalled [contact.Contact]. This represents the
   contact file of the server this call will connect with.
   If this is nil, you may not contact the UD server hosted by the xx network.
   Third-party services may vary.
   You may use the UD server run by the xx network team by using [E2e.GetUdContactFromNdf].
 - address - REQUIRED. The IP address of the UD server this call will connect with.
   You may use the UD server run by the xx network team by using [E2e.GetUdAddressFromNdf].
   If this is nil, you may not contact the UD server hosted by the xx network.
   Third-party services may vary.

Returns
 - A Manager object which is registered to the specified UD service.
 */
FOUNDATION_EXPORT BindingsUserDiscovery* _Nullable BindingsNewOrLoadUd(long e2eID, id<BindingsUdNetworkStatus> _Nullable follower, NSString* _Nullable username, NSData* _Nullable registrationValidationSignature, NSData* _Nullable cert, NSData* _Nullable contactFile, NSString* _Nullable address, NSError* _Nullable* _Nullable error);

/**
 * NewUdManagerFromBackup builds a new user discover manager from a backup. It
will construct a manager that is already registered. Confirmed facts have
already been restored via the call NewCmixFromBackup.

Parameters:
 - e2eID - e2e object ID in the tracker
 - follower - network follower func wrapped in UdNetworkStatus
 - cert - the TLS certificate for the UD server this call will connect with.
   You may use the UD server run by the xx network team by using
   [E2e.GetUdCertFromNdf].
 - contactFile - the data within a marshalled [contact.Contact]. This
   represents the contact file of the server this call will connect with. You
   may use the UD server run by the xx network team by using
   [E2e.GetUdContactFromNdf].
 - address - the IP address of the UD server this call will connect with. You
   may use the UD server run by the xx network team by using
   [E2e.GetUdAddressFromNdf].
 */
FOUNDATION_EXPORT BindingsUserDiscovery* _Nullable BindingsNewUdManagerFromBackup(long e2eID, id<BindingsUdNetworkStatus> _Nullable follower, NSData* _Nullable cert, NSData* _Nullable contactFile, NSString* _Nullable address, NSError* _Nullable* _Nullable error);

/**
 * RegisterForNotifications allows a client to register for push notifications.
The token is a firebase messaging token.

Parameters:
  - e2eId - ID of the E2E object in the E2E tracker
 */
FOUNDATION_EXPORT BOOL BindingsRegisterForNotifications(long e2eId, NSString* _Nullable token, NSError* _Nullable* _Nullable error);

/**
 * RegisterLogWriter registers a callback on which logs are written.
 */
FOUNDATION_EXPORT void BindingsRegisterLogWriter(id<BindingsLogWriter> _Nullable writer);

/**
 * RequestRestLike sends a restlike request to a given contact.

Parameters:
 - e2eID - ID of the e2e object in the tracker
 - recipient - marshalled contact.Contact object
 - request - JSON marshalled RestlikeMessage
 - paramsJSON - JSON marshalled single.RequestParams

Returns:
 - []byte - JSON marshalled restlike.Message
 */
FOUNDATION_EXPORT NSData* _Nullable BindingsRequestRestLike(long e2eID, NSData* _Nullable recipient, NSData* _Nullable request, NSData* _Nullable paramsJSON, NSError* _Nullable* _Nullable error);

/**
 * RestlikeRequest performs a normal restlike request.

Parameters:
 - cmixId - ID of the cMix object in the tracker
 - connectionID - ID of the connection in the tracker
 - request - JSON marshalled RestlikeMessage
 - e2eParamsJSON - JSON marshalled xxdk.E2EParams

Returns:
 - []byte - JSON marshalled RestlikeMessage
 */
FOUNDATION_EXPORT NSData* _Nullable BindingsRestlikeRequest(long cmixId, long connectionID, NSData* _Nullable request, NSData* _Nullable e2eParamsJSON, NSError* _Nullable* _Nullable error);

/**
 * RestlikeRequestAuth performs an authenticated restlike request.

Parameters:
 - cmixId - ID of the cMix object in the tracker
 - authConnectionID - ID of the authenticated connection in the tracker
 - request - JSON marshalled RestlikeMessage
 - e2eParamsJSON - JSON marshalled xxdk.E2EParams

Returns:
 - []byte - JSON marshalled RestlikeMessage
 */
FOUNDATION_EXPORT NSData* _Nullable BindingsRestlikeRequestAuth(long cmixId, long authConnectionID, NSData* _Nullable request, NSData* _Nullable e2eParamsJSON, NSError* _Nullable* _Nullable error);

/**
 * ResumeBackup resumes the backup processes with a new callback.
Call this function only when resuming a backup that has already been
initialized or to replace the callback.
To start the backup for the first time or to use a new password, use
InitializeBackup.

Parameters:
 - e2eID - ID of the E2e object in the e2e tracker.
 - udID - ID of the UserDiscovery object in the ud tracker.
 - cb - the callback to be called when a backup is triggered.
   This will replace any callback that has been passed into InitializeBackup.
 */
FOUNDATION_EXPORT BindingsBackup* _Nullable BindingsResumeBackup(long e2eID, long udID, id<BindingsUpdateBackupFunc> _Nullable cb, NSError* _Nullable* _Nullable error);

/**
 * SearchUD searches user discovery for the passed Facts. The searchCallback
will return a list of contacts, each having the facts it hit against. This is
NOT intended to be used to search for multiple users at once; that can have a
privacy reduction. Instead, it is intended to be used to search for a user
where multiple pieces of information is known.

Parameters:
 - e2eID - e2e object ID in the tracker
 - udContact - the marshalled bytes of the contact.Contact for the user
   discovery server
 - factListJSON - the JSON marshalled bytes of [fact.FactList]
 - singleRequestParams - the JSON marshalled bytes of single.RequestParams

Returns:
 - []byte - the JSON marshalled bytes of the SingleUseSendReport object,
   which can be passed into Cmix.WaitForRoundResult to see if the send
   operation succeeded.
 */
FOUNDATION_EXPORT NSData* _Nullable BindingsSearchUD(long e2eID, NSData* _Nullable udContact, id<BindingsUdSearchCallback> _Nullable cb, NSData* _Nullable factListJSON, NSData* _Nullable singleRequestParamsJSON, NSError* _Nullable* _Nullable error);

/**
 * SetDashboardURL is a function which modifies the base dashboard URL that is
returned as part of any send report. Internally, this is defaulted to
"https://dashboard.xx.network". This should only be called if the user
explicitly wants to modify the dashboard URL. This function is not
thread-safe, and as such should only be called on setup.

Parameters:
 - newURL - A valid URL that will be used for round look up on any send
   report.
 */
FOUNDATION_EXPORT void BindingsSetDashboardURL(NSString* _Nullable newURL);

/**
 * SetFactsOnContact replaces the facts on the contact with the passed in facts
pass in empty facts in order to clear the facts.

Parameters:
 - marshaledContact - the JSON marshalled bytes of [contact.Contact]
 - factListJSON - the JSON marshalled bytes of [fact.FactList]

Returns:
 - []byte - marshalled bytes of the modified [contact.Contact]
 */
FOUNDATION_EXPORT NSData* _Nullable BindingsSetFactsOnContact(NSData* _Nullable marshaledContact, NSData* _Nullable factListJSON, NSError* _Nullable* _Nullable error);

/**
 * SetOffset will set an internal offset variable. All calls to [netTime.Now]
will have this offset applied to this value.

Parameters:
 - offset is a time by which netTime.Now will be offset. This value may be
   negative or positive. This expects a 64-bit integer value which will
   represent the number in microseconds this offset will be.
 */
FOUNDATION_EXPORT void BindingsSetOffset(int64_t offset);

// skipped function SetTimeSource with unsupported parameter or return types


/**
 * StoreReceptionIdentity stores the given identity in Cmix storage with the
given key. This is the ideal way to securely store identities, as the caller
of this function is only required to store the given key separately rather
than the keying material.
 */
FOUNDATION_EXPORT BOOL BindingsStoreReceptionIdentity(NSString* _Nullable key, NSData* _Nullable identity, long cmixId, NSError* _Nullable* _Nullable error);

/**
 * TransmitSingleUse transmits payload to recipient via single-use.

Parameters:
 - e2eID - ID of the e2e object in the tracker
 - recipient - marshalled contact.Contact object
 - tag - identifies the single-use message
 - payload - message contents
 - paramsJSON - JSON marshalled single.RequestParams
 - responseCB - the callback that will be called when a response is received

Returns:
 - []byte - the JSON marshalled bytes of the SingleUseSendReport object,
   which can be passed into WaitForRoundResult to see if the send succeeded.
 */
FOUNDATION_EXPORT NSData* _Nullable BindingsTransmitSingleUse(long e2eID, NSData* _Nullable recipient, NSString* _Nullable tag, NSData* _Nullable payload, NSData* _Nullable paramsJSON, id<BindingsSingleUseResponse> _Nullable responseCB, NSError* _Nullable* _Nullable error);

/**
 * UnregisterForNotifications turns off notifications for this client.

Parameters:
  - e2eId - ID of the E2E object in the E2E tracker
 */
FOUNDATION_EXPORT BOOL BindingsUnregisterForNotifications(long e2eId, NSError* _Nullable* _Nullable error);

/**
 * UpdateCommonErrors updates the internal error mapping database. This internal
database maps errors returned from the backend to user-friendly error
messages.

Parameters:
 - jsonFile - contents of a JSON file whose format conforms to the example below.

Example Input:
 {
   "Failed to Unmarshal Conversation": "Could not retrieve conversation",
   "Failed to unmarshal SentRequestMap": "Failed to pull up friend requests",
   "cannot create username when network is not health": "Cannot create username, unable to connect to network",
 }
 */
FOUNDATION_EXPORT BOOL BindingsUpdateCommonErrors(NSString* _Nullable jsonFile, NSError* _Nullable* _Nullable error);

@class BindingsAuthCallbacks;

@class BindingsChannelMessageReceptionCallback;

@class BindingsClientError;

@class BindingsEventModel;

@class BindingsEventModelBuilder;

@class BindingsFileTransferReceiveProgressCallback;

@class BindingsFileTransferSentProgressCallback;

@class BindingsGroupChatProcessor;

@class BindingsGroupRequest;

@class BindingsListener;

@class BindingsLogWriter;

@class BindingsMessageDeliveryCallback;

@class BindingsNetworkHealthCallback;

@class BindingsProcessor;

@class BindingsReceiveFileCallback;

@class BindingsReporterFunc;

@class BindingsRestlikeCallback;

@class BindingsSingleUseCallback;

@class BindingsSingleUseResponse;

@class BindingsStopper;

@class BindingsTrackServicesCallback;

@class BindingsUdLookupCallback;

@class BindingsUdMultiLookupCallback;

@class BindingsUdNetworkStatus;

@class BindingsUdSearchCallback;

@class BindingsUpdateBackupFunc;

/**
 * AuthCallbacks is the bindings-specific interface for auth.Callbacks methods.
 */
@interface BindingsAuthCallbacks : NSObject <goSeqRefInterface, BindingsAuthCallbacks> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)confirm:(NSData* _Nullable)contact receptionId:(NSData* _Nullable)receptionId ephemeralId:(int64_t)ephemeralId roundId:(int64_t)roundId;
- (void)request:(NSData* _Nullable)contact receptionId:(NSData* _Nullable)receptionId ephemeralId:(int64_t)ephemeralId roundId:(int64_t)roundId;
- (void)reset:(NSData* _Nullable)contact receptionId:(NSData* _Nullable)receptionId ephemeralId:(int64_t)ephemeralId roundId:(int64_t)roundId;
@end

/**
 * ChannelMessageReceptionCallback is the callback that returns the context for
a channel message via the Callback.
It must return a unique UUID for the message by which it can be referenced
later
 */
@interface BindingsChannelMessageReceptionCallback : NSObject <goSeqRefInterface, BindingsChannelMessageReceptionCallback> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (long)callback:(NSData* _Nullable)receivedChannelMessageReport err:(NSError* _Nullable)err;
@end

@interface BindingsClientError : NSObject <goSeqRefInterface, BindingsClientError> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)report:(NSString* _Nullable)source message:(NSString* _Nullable)message trace:(NSString* _Nullable)trace;
@end

/**
 * EventModel is an interface which an external party which uses the channels
system passed an object which adheres to in order to get events on the
channel.
 */
@interface BindingsEventModel : NSObject <goSeqRefInterface, BindingsEventModel> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * JoinChannel is called whenever a channel is joined locally.

Parameters:
 - channel - Returns the pretty print representation of a channel.
 */
- (void)joinChannel:(NSString* _Nullable)channel;
/**
 * LeaveChannel is called whenever a channel is left locally.

Parameters:
 - ChannelId - The marshalled channel [id.ID].
 */
- (void)leaveChannel:(NSData* _Nullable)channelID;
/**
 * ReceiveMessage is called whenever a message is received on a given
channel. It may be called multiple times on the same message. It is
incumbent on the user of the API to filter such called by message ID.

Parameters:
 - channelID - The marshalled channel [id.ID].
 - messageID - The bytes of the [channel.MessageID] of the received
   message.
 - nickname - The nickname of the sender of the message.
 - text - The content of the message.
 - timestamp - Time the message was received; represented as nanoseconds
   since unix epoch.
 - pubKey - The sender's Ed25519 public key.
 - codeset - The codeset version.
 - lease - The number of nanoseconds that the message is valid for.
 - roundId - The ID of the round that the message was received on.
 - mType - the type of the message, always 1 for this call
 - status - the [channels.SentStatus] of the message.

Statuses will be enumerated as such:
 Sent      =  0
 Delivered =  1
 Failed    =  2

Returns a non-negative unique UUID for the message that it can be
referenced by later with [EventModel.UpdateSentStatus].
 */
- (int64_t)receiveMessage:(NSData* _Nullable)channelID messageID:(NSData* _Nullable)messageID nickname:(NSString* _Nullable)nickname text:(NSString* _Nullable)text pubKey:(NSData* _Nullable)pubKey codeset:(long)codeset timestamp:(int64_t)timestamp lease:(int64_t)lease roundId:(int64_t)roundId mType:(int64_t)mType status:(int64_t)status;
/**
 * ReceiveReaction is called whenever a reaction to a message is received
on a given channel. It may be called multiple times on the same reaction.
It is incumbent on the user of the API to filter such called by message
ID.

Messages may arrive our of order, so a reply in theory can arrive before
the initial message. As a result, it may be important to buffer
reactions.

Parameters:
 - channelID - The marshalled channel [id.ID].
 - messageID - The bytes of the [channel.MessageID] of the received
   message.
 - reactionTo - The [channel.MessageID] for the message that received a
   reply.
 - nickname - The nickname of the sender of the message.
 - reaction - The contents of the reaction message.
 - pubKey - The sender's Ed25519 public key.
 - codeset - The codeset version.
 - timestamp - Time the message was received; represented as nanoseconds
   since unix epoch.
 - lease - The number of nanoseconds that the message is valid for.
 - roundId - The ID of the round that the message was received on.
 - mType - the type of the message, always 1 for this call
 - status - the [channels.SentStatus] of the message.

Statuses will be enumerated as such:
 Sent      =  0
 Delivered =  1
 Failed    =  2

Returns a non-negative unique uuid for the message by which it can be
referenced later with UpdateSentStatus
 */
- (int64_t)receiveReaction:(NSData* _Nullable)channelID messageID:(NSData* _Nullable)messageID reactionTo:(NSData* _Nullable)reactionTo nickname:(NSString* _Nullable)nickname reaction:(NSString* _Nullable)reaction pubKey:(NSData* _Nullable)pubKey codeset:(long)codeset timestamp:(int64_t)timestamp lease:(int64_t)lease roundId:(int64_t)roundId mType:(int64_t)mType status:(int64_t)status;
/**
 * ReceiveReply is called whenever a message is received that is a reply on
a given channel. It may be called multiple times on the same message. It
is incumbent on the user of the API to filter such called by message ID.

Messages may arrive our of order, so a reply in theory can arrive before
the initial message. As a result, it may be important to buffer replies.

Parameters:
 - channelID - The marshalled channel [id.ID].
 - messageID - The bytes of the [channel.MessageID] of the received
   message.
 - reactionTo - The [channel.MessageID] for the message that received a
   reply.
 - nickname - The nickname of the sender of the message.
 - text - The content of the message.
 - pubKey - The sender's Ed25519 public key.
 - codeset - The codeset version.
 - timestamp - Time the message was received; represented as nanoseconds
   since unix epoch.
 - lease - The number of nanoseconds that the message is valid for.
 - roundId - The ID of the round that the message was received on.
 - mType - the type of the message, always 1 for this call
 - status - the [channels.SentStatus] of the message.

Statuses will be enumerated as such:
 Sent      =  0
 Delivered =  1
 Failed    =  2

Returns a non-negative unique UUID for the message that it can be
referenced by later with [EventModel.UpdateSentStatus].
 */
- (int64_t)receiveReply:(NSData* _Nullable)channelID messageID:(NSData* _Nullable)messageID reactionTo:(NSData* _Nullable)reactionTo nickname:(NSString* _Nullable)nickname text:(NSString* _Nullable)text pubKey:(NSData* _Nullable)pubKey codeset:(long)codeset timestamp:(int64_t)timestamp lease:(int64_t)lease roundId:(int64_t)roundId mType:(int64_t)mType status:(int64_t)status;
/**
 * UpdateSentStatus is called whenever the sent status of a message has
changed.

Parameters:
 - messageID - The bytes of the [channel.MessageID] of the received
   message.
 - status - the [channels.SentStatus] of the message.

Statuses will be enumerated as such:
 Sent      =  0
 Delivered =  1
 Failed    =  2
 */
- (void)updateSentStatus:(int64_t)uuid messageID:(NSData* _Nullable)messageID timestamp:(int64_t)timestamp roundID:(int64_t)roundID status:(int64_t)status;
@end

/**
 * EventModelBuilder builds an event model
 */
@interface BindingsEventModelBuilder : NSObject <goSeqRefInterface, BindingsEventModelBuilder> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (id<BindingsEventModel> _Nullable)build:(NSString* _Nullable)path;
@end

/**
 * FileTransferReceiveProgressCallback is a bindings-layer interface that is
called with the progress of a received file.
 */
@interface BindingsFileTransferReceiveProgressCallback : NSObject <goSeqRefInterface, BindingsFileTransferReceiveProgressCallback> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * Callback is called when a file part is received or an error occurs. Once
a transfer completes, the file can be received using
[FileTransfer.Receive].

Parameters:
 - payload - JSON of [Progress], which describes the progress of the
   current transfer.
 - t - file part tracker that allows the lookup of the status of
   individual file parts.
 - err - Fatal errors during receiving. If an error is returned, the
   transfer has failed and will not resume.
 */
- (void)callback:(NSData* _Nullable)payload t:(BindingsFilePartTracker* _Nullable)t err:(NSError* _Nullable)err;
@end

/**
 * FileTransferSentProgressCallback is a bindings-layer interface that contains
a callback that is called when the sent progress updates.
 */
@interface BindingsFileTransferSentProgressCallback : NSObject <goSeqRefInterface, BindingsFileTransferSentProgressCallback> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * Callback is called when a file part is sent or an error occurs. Once a
transfer completes, it should be closed using [FileTransfer.CloseSend].

Parameters:
 - payload - JSON of [Progress], which describes the progress of the
   current transfer.
 - t - file part tracker that allows the lookup of the status of
   individual file parts.
 - err - Fatal errors during sending. If an error is returned, the
   transfer has failed and will not resume. It must be cleared using
   [FileTransfer.CloseSend].
 */
- (void)callback:(NSData* _Nullable)payload t:(BindingsFilePartTracker* _Nullable)t err:(NSError* _Nullable)err;
@end

/**
 * GroupChatProcessor manages the handling of received group chat messages.
The decryptedMessage field will be a JSON marshalled GroupChatMessage.
 */
@interface BindingsGroupChatProcessor : NSObject <goSeqRefInterface, BindingsGroupChatProcessor> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)process:(NSData* _Nullable)decryptedMessage msg:(NSData* _Nullable)msg receptionId:(NSData* _Nullable)receptionId ephemeralId:(int64_t)ephemeralId roundId:(int64_t)roundId roundUrl:(NSString* _Nullable)roundUrl err:(NSError* _Nullable)err;
- (NSString* _Nonnull)string;
@end

/**
 * GroupRequest is a bindings-layer interface that handles a group reception.

Parameters:
 - g - a bindings layer Group object.
 */
@interface BindingsGroupRequest : NSObject <goSeqRefInterface, BindingsGroupRequest> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)callback:(BindingsGroup* _Nullable)g;
@end

/**
 * Listener provides a callback to hear a message.

An object implementing this interface can be called back when the client gets
a message of the type that the registerer specified at registration time.
 */
@interface BindingsListener : NSObject <goSeqRefInterface, BindingsListener> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * Hear is called to receive a message in the UI.

Parameters:
 - item - JSON marshalled Message object
 */
- (void)hear:(NSData* _Nullable)item;
/**
 * Name returns a name; used for debugging.
 */
- (NSString* _Nonnull)name;
@end

@interface BindingsLogWriter : NSObject <goSeqRefInterface, BindingsLogWriter> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)log:(NSString* _Nullable)p0;
@end

/**
 * MessageDeliveryCallback gets called on the determination if all events
related to a message send were successful.

If delivered == true, timedOut == false && roundResults != nil

If delivered == false, roundResults == nil

If timedOut == true, delivered == false && roundResults == nil
 */
@interface BindingsMessageDeliveryCallback : NSObject <goSeqRefInterface, BindingsMessageDeliveryCallback> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)eventCallback:(BOOL)delivered timedOut:(BOOL)timedOut roundResults:(NSData* _Nullable)roundResults;
@end

/**
 * NetworkHealthCallback contains a callback that is used to receive
notification if network health changes.
 */
@interface BindingsNetworkHealthCallback : NSObject <goSeqRefInterface, BindingsNetworkHealthCallback> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)callback:(BOOL)p0;
@end

/**
 * Processor is the bindings-specific interface for message.Processor methods.
 */
@interface BindingsProcessor : NSObject <goSeqRefInterface, BindingsProcessor> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)process:(NSData* _Nullable)message receptionId:(NSData* _Nullable)receptionId ephemeralId:(int64_t)ephemeralId roundId:(int64_t)roundId;
- (NSString* _Nonnull)string;
@end

/**
 * ReceiveFileCallback is a bindings-layer interface that contains a callback
that is called when a file is received.
 */
@interface BindingsReceiveFileCallback : NSObject <goSeqRefInterface, BindingsReceiveFileCallback> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * Callback is called when a new file transfer is received.

Parameters:
 - payload - JSON of [ReceivedFile], which contains information about the
   incoming file transfer.
 */
- (void)callback:(NSData* _Nullable)payload;
@end

/**
 * ReporterFunc is a bindings-layer interface that receives info from the Event
Manager.

Parameters:
 - payload - JSON marshalled EventReport object
 */
@interface BindingsReporterFunc : NSObject <goSeqRefInterface, BindingsReporterFunc> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)report:(NSData* _Nullable)payload err:(NSError* _Nullable)err;
@end

/**
 * RestlikeCallback is the public function type bindings can use to make an
asynchronous restlike request.

Parameters:
 - []byte - JSON marshalled restlike.Message
 - error - an error (the results of calling json.Marshal on the message)
 */
@interface BindingsRestlikeCallback : NSObject <goSeqRefInterface, BindingsRestlikeCallback> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)callback:(NSData* _Nullable)p0 p1:(NSError* _Nullable)p1;
@end

/**
 * SingleUseCallback func is passed into Listen and called when messages are
received.

Parameters:
 - callbackReport - the JSON marshalled bytes of the SingleUseCallbackReport
   object, which can be passed into Cmix.WaitForRoundResult to see if the
   send operation succeeded.
 */
@interface BindingsSingleUseCallback : NSObject <goSeqRefInterface, BindingsSingleUseCallback> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)callback:(NSData* _Nullable)callbackReport err:(NSError* _Nullable)err;
@end

/**
 * SingleUseResponse is the public facing callback function passed by bindings
clients into TransmitSingleUse.

Parameters:
 - callbackReport - the JSON marshalled bytes of the SingleUseResponseReport
   object, which can be passed into Cmix.WaitForRoundResult to see if the
   send operation succeeded.
 */
@interface BindingsSingleUseResponse : NSObject <goSeqRefInterface, BindingsSingleUseResponse> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)callback:(NSData* _Nullable)responseReport err:(NSError* _Nullable)err;
@end

/**
 * Stopper is a public interface returned by Listen, allowing users to stop the
registered listener.
 */
@interface BindingsStopper : NSObject <goSeqRefInterface, BindingsStopper> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)stop;
@end

/**
 * TrackServicesCallback is the callback for [Cmix.TrackServices].
This will pass to the user a JSON-marshalled list of backend services.
If there was an error retrieving or marshalling the service list,
there is an error for the second parameter which will be non-null.

Parameters:
  - marshalData - JSON marshalled bytes of [message.ServiceList], which is an
    array of [id.ID] and [message.Service].
  - err - JSON unmarshalling error

Example JSON:

	[
	  {
	    "Id": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD", // bytes of id.ID encoded as base64 string
	    "Services": [
	      {
	        "Identifier": "AQID",                             // bytes encoded as base64 string
	        "Tag": "TestTag 1",                               // string
	        "Metadata": "BAUG"                                // bytes encoded as base64 string
	      }
	    ]
	  },
	  {
	    "Id": "AAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD",
	    "Services": [
	      {
	        "Identifier": "AQID",
	        "Tag": "TestTag 2",
	        "Metadata": "BAUG"
	      }
	    ]
	  },
	]
 */
@interface BindingsTrackServicesCallback : NSObject <goSeqRefInterface, BindingsTrackServicesCallback> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)callback:(NSData* _Nullable)marshalData err:(NSError* _Nullable)err;
@end

/**
 * UdLookupCallback contains the callback called by LookupUD that returns the
contact that matches the passed in ID.

Parameters:
 - contactBytes - the marshalled bytes of contact.Contact returned from the
   lookup, or nil if an error occurs
 - err - any errors that occurred in the lookup
 */
@interface BindingsUdLookupCallback : NSObject <goSeqRefInterface, BindingsUdLookupCallback> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)callback:(NSData* _Nullable)contactBytes err:(NSError* _Nullable)err;
@end

/**
 * UdMultiLookupCallback contains the callback called by MultiLookupUD that returns the
contacts which match the passed in IDs.

Parameters:
 - contactListJSON - the JSON marshalled bytes of []contact.Contact, or nil
   if an error occurs.

  JSON Example:
  {
 	"<xxc(2)F8dL9EC6gy+RMJuk3R+Au6eGExo02Wfio5cacjBcJRwDEgB7Ugdw/BAr6RkCABkWAFV1c2VybmFtZTA7c4LzV05sG+DMt+rFB0NIJg==xxc>",
 	"<xxc(2)eMhAi/pYkW5jCmvKE5ZaTglQb+fTo1D8NxVitr5CCFADEgB7Ugdw/BAr6RoCABkWAFV1c2VybmFtZTE7fElAa7z3IcrYrrkwNjMS2w==xxc>",
 	"<xxc(2)d7RJTu61Vy1lDThDMn8rYIiKSe1uXA/RCvvcIhq5Yg4DEgB7Ugdw/BAr6RsCABkWAFV1c2VybmFtZTI7N3XWrxIUpR29atpFMkcR6A==xxc>"
	}
 - failedIDs - JSON marshalled list of []*id.ID objects which failed lookup
 - err - any errors that occurred in the multilookup.
 */
@interface BindingsUdMultiLookupCallback : NSObject <goSeqRefInterface, BindingsUdMultiLookupCallback> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)callback:(NSData* _Nullable)contactListJSON failedIDs:(NSData* _Nullable)failedIDs err:(NSError* _Nullable)err;
@end

/**
 * UdNetworkStatus contains the UdNetworkStatus, which is a bindings-level
interface for ud.udNetworkStatus.
 */
@interface BindingsUdNetworkStatus : NSObject <goSeqRefInterface, BindingsUdNetworkStatus> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * UdNetworkStatus returns:
- int - a xxdk.Status int
 */
- (long)udNetworkStatus;
@end

/**
 * UdSearchCallback contains the callback called by SearchUD that returns a list
of contact.Contact objects  that match the list of facts passed into
SearchUD.

Parameters:
 - contactListJSON - the JSON marshalled bytes of []contact.Contact, or nil
   if an error occurs.

  JSON Example:
  {
 	"<xxc(2)F8dL9EC6gy+RMJuk3R+Au6eGExo02Wfio5cacjBcJRwDEgB7Ugdw/BAr6RkCABkWAFV1c2VybmFtZTA7c4LzV05sG+DMt+rFB0NIJg==xxc>",
 	"<xxc(2)eMhAi/pYkW5jCmvKE5ZaTglQb+fTo1D8NxVitr5CCFADEgB7Ugdw/BAr6RoCABkWAFV1c2VybmFtZTE7fElAa7z3IcrYrrkwNjMS2w==xxc>",
 	"<xxc(2)d7RJTu61Vy1lDThDMn8rYIiKSe1uXA/RCvvcIhq5Yg4DEgB7Ugdw/BAr6RsCABkWAFV1c2VybmFtZTI7N3XWrxIUpR29atpFMkcR6A==xxc>"
	}
 - err - any errors that occurred in the search.
 */
@interface BindingsUdSearchCallback : NSObject <goSeqRefInterface, BindingsUdSearchCallback> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)callback:(NSData* _Nullable)contactListJSON err:(NSError* _Nullable)err;
@end

/**
 * UpdateBackupFunc contains a function callback that returns new backups.
 */
@interface BindingsUpdateBackupFunc : NSObject <goSeqRefInterface, BindingsUpdateBackupFunc> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)updateBackup:(NSData* _Nullable)encryptedBackup;
@end

#endif
